#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
"""

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ª–æ–≥–æ–≤
real_headers = [
    '–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏', 
    'ID\n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', 
    '–¢–ì\n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', 
    '–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã', 
    '–§–ò–û \n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', 
    '–î–æ–ª–∂–Ω–æ—Å—Ç—å', 
    '–¢–µ–ª–µ—Ñ–æ–Ω\n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', 
    '–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã ', 
    '–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã ', 
    '–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –±–∞—Ä—Ç–µ—Ä–∞/—Å–∫–∏–¥–∫–∏ ', 
    '–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º? ', 
    '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', 
    '–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç ', 
    '–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞ –∏–ª–∏  %  —Å–∫–∏–¥–∫–∏ ', 
    '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ä—Ç–µ—Ä–∞', 
    '–ë–ê–†', 
    '–ó–ê–Ø–í–ö–ê', 
    '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –°–ê–î/–î–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –ø–æ —Ä–µ–∫–ª–∞–º–µ ', 
    'STARTDATE (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —á–µ—Ç–≤–µ—Ä–≥–∞–º –ø–æ—Å–ª–µ 22:00)', 
    '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'
]

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from constants import SheetCols

constants_headers = {
    'TIMESTAMP': SheetCols.TIMESTAMP,
    'TG_ID': SheetCols.TG_ID,
    'TG_TAG': SheetCols.TG_TAG,
    'EMAIL': SheetCols.EMAIL,
    'FIO_INITIATOR': SheetCols.FIO_INITIATOR,
    'JOB_TITLE': SheetCols.JOB_TITLE,
    'PHONE_INITIATOR': SheetCols.PHONE_INITIATOR,
    'OWNER_FIRST_NAME_COL': SheetCols.OWNER_FIRST_NAME_COL,
    'OWNER_LAST_NAME_COL': SheetCols.OWNER_LAST_NAME_COL,
    'REASON_COL': SheetCols.REASON_COL,
    'CARD_TYPE_COL': SheetCols.CARD_TYPE_COL,
    'CARD_NUMBER_COL': SheetCols.CARD_NUMBER_COL,
    'CATEGORY_COL': SheetCols.CATEGORY_COL,
    'AMOUNT_COL': SheetCols.AMOUNT_COL,
    'FREQUENCY_COL': SheetCols.FREQUENCY_COL,
    'ISSUE_LOCATION_COL': SheetCols.ISSUE_LOCATION_COL,
    'STATUS_COL': SheetCols.STATUS_COL,
    'APPROVAL_STATUS': SheetCols.APPROVAL_STATUS,
    'START_DATE': SheetCols.START_DATE,
    'ACTIVATED': SheetCols.ACTIVATED,
}

print("=== –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–ì–û–õ–û–í–ö–û–í ===")
print("\n–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:")
for i, header in enumerate(real_headers):
    print(f"{i+1:2d}. '{header}' (len={len(header)})")

print("\n–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç:")
for name, header in constants_headers.items():
    print(f"    {name}: '{header}' (len={len(header)})")

print("\n=== –ü–û–ò–°–ö –°–û–í–ü–ê–î–ï–ù–ò–ô ===")
for name, const_header in constants_headers.items():
    found = False
    for i, real_header in enumerate(real_headers):
        if const_header == real_header:
            print(f"‚úÖ {name}: –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –≤ –ø–æ–∑–∏—Ü–∏–∏ {i+1}")
            found = True
            break
    
    if not found:
        # –ü—Ä–æ–±—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        normalized_const = const_header.strip().replace('\n', ' ')
        for i, real_header in enumerate(real_headers):
            normalized_real = real_header.strip().replace('\n', ' ')
            if normalized_const == normalized_real:
                print(f"üîÑ {name}: –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –≤ –ø–æ–∑–∏—Ü–∏–∏ {i+1}")
                print(f"   –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞: '{const_header}'")
                print(f"   –†–µ–∞–ª—å–Ω—ã–π:  '{real_header}'")
                found = True
                break
    
    if not found:
        print(f"‚ùå {name}: –ù–ï –ù–ê–ô–î–ï–ù–û")
        print(f"   –ò—â–µ–º: '{const_header}'")
        # –ü–æ–∫–∞–∂–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for i, real_header in enumerate(real_headers):
            if const_header.replace('\n', '').replace(' ', '').lower() in real_header.replace('\n', '').replace(' ', '').lower():
                print(f"   –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {i+1}: '{real_header}'")

print("\n=== –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–ù–û–ì–û –ó–ê–ì–û–õ–û–í–ö–ê ===")
problem_header = '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –°–ê–î/–î–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –ø–æ —Ä–µ–∫–ª–∞–º–µ '
print(f"–ò—â–µ–º: '{problem_header}' (len={len(problem_header)})")
for i, real_header in enumerate(real_headers):
    if problem_header == real_header:
        print(f"‚úÖ –ù–ê–ô–î–ï–ù–û –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i+1}")
        break
else:
    print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û")
    # –ü–æ–∫–∞–∂–µ–º —Å–∏–º–≤–æ–ª—ã –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    print("–ö–æ–¥—ã —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ:", [ord(c) for c in problem_header])
    # –ù–∞–π–¥–µ–º –ø–æ—Ö–æ–∂–∏–π
    for i, real_header in enumerate(real_headers):
        if '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –°–ê–î' in real_header:
            print(f"–ü–æ—Ö–æ–∂–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i+1}: '{real_header}'")
            print("–ö–æ–¥—ã —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ:", [ord(c) for c in real_header])
