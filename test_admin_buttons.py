#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
"""

import sys
import os
import logging
from unittest.mock import Mock, patch, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_admin_buttons():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–ú–ò–ù–°–ö–ò–• –ö–ù–û–ü–û–ö")
    print("=" * 50)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    import admin_handlers
    from constants import CALLBACK_APPROVE_PREFIX, CALLBACK_REJECT_PREFIX
    
    # –ú–æ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã Telegram
    mock_update = Mock()
    mock_context = Mock()
    mock_query = Mock()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
    mock_update.callback_query = mock_query
    mock_query.answer = AsyncMock()
    mock_query.edit_message_text = AsyncMock()
    mock_query.data = f"{CALLBACK_APPROVE_PREFIX}1"  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ‚Ññ1
    mock_query.from_user.id = 123456789
    mock_query.message.text_html = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"
    
    mock_context.bot.send_message = AsyncMock()
    
    print("‚úÖ Mock –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ g_sheets
    with patch('admin_handlers.g_sheets.update_cell_by_row', return_value=True) as mock_update_cell, \
         patch('admin_handlers.g_sheets.get_row_data', return_value={
             '–¢–ì –ó–∞–ø–æ–ª–Ω—è—é—â–µ–≥–æ': '987654321',
             '–¢–µ–≥ Telegram': '@testuser',
             '–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã': '–¢–µ—Å—Ç',
             '–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞': '–¢–µ—Å—Ç–æ–≤'
         }) as mock_get_row, \
         patch.dict(os.environ, {'BOSS_ID': '123456789'}):
        
        print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º approve_request...")
        
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–∏—è
            await admin_handlers.approve_request(mock_update, mock_context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
            mock_query.answer.assert_called_once()
            mock_update_cell.assert_called_once_with(1, '–°—Ç–∞—Ç—É—Å –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è', '–û–¥–æ–±—Ä–µ–Ω–æ')
            mock_query.edit_message_text.assert_called_once()
            mock_context.bot.send_message.assert_called_once()
            
            print("‚úÖ approve_request —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ approve_request: {e}")
            return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    print("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º reject_request_start...")
    
    mock_query.data = f"{CALLBACK_REJECT_PREFIX}2"  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ‚Ññ2
    mock_context.user_data = {}
    mock_query.message.reply_text = AsyncMock()
    
    try:
        result = await admin_handlers.reject_request_start(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        from constants import AWAIT_REJECT_REASON
        assert result == AWAIT_REJECT_REASON, f"–û–∂–∏–¥–∞–ª—Å—è {AWAIT_REJECT_REASON}, –ø–æ–ª—É—á–µ–Ω {result}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ row_index —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        assert mock_context.user_data.get('admin_action_row_index') == 2
        
        print("‚úÖ reject_request_start —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ reject_request_start: {e}")
        return False
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ê–î–ú–ò–ù–°–ö–ò–• –ö–ù–û–ü–û–ö –ü–†–û–ô–î–ï–ù–´!")
    return True

async def test_callback_patterns():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã callback –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–¢–¢–ï–†–ù–û–í CALLBACK")
    print("=" * 50)
    
    from constants import CALLBACK_APPROVE_PREFIX, CALLBACK_REJECT_PREFIX
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_callbacks = [
        f"{CALLBACK_APPROVE_PREFIX}1",
        f"{CALLBACK_APPROVE_PREFIX}25", 
        f"{CALLBACK_REJECT_PREFIX}3",
        f"{CALLBACK_REJECT_PREFIX}100"
    ]
    
    for callback_data in test_callbacks:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º row_index
            row_index = int(callback_data.split(':')[1])
            prefix = callback_data.split(':')[0] + ':'
            
            if prefix == CALLBACK_APPROVE_PREFIX:
                action = "–æ–¥–æ–±—Ä–µ–Ω–∏–µ"
            elif prefix == CALLBACK_REJECT_PREFIX:
                action = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"
            else:
                action = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ"
            
            print(f"‚úÖ {callback_data} -> {action} –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {callback_data}: {e}")
            return False
    
    print("‚úÖ –í—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_constants():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã"""
    
    print("\nüß™ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–¢–ê–ù–¢")
    print("=" * 30)
    
    try:
        from constants import (
            CALLBACK_APPROVE_PREFIX, CALLBACK_REJECT_PREFIX, 
            AWAIT_REJECT_REASON, SheetCols
        )
        
        print(f"‚úÖ CALLBACK_APPROVE_PREFIX = '{CALLBACK_APPROVE_PREFIX}'")
        print(f"‚úÖ CALLBACK_REJECT_PREFIX = '{CALLBACK_REJECT_PREFIX}'")
        print(f"‚úÖ AWAIT_REJECT_REASON = {AWAIT_REJECT_REASON}")
        print(f"‚úÖ SheetCols.STATUS_COL = '{SheetCols.STATUS_COL}'")
        print(f"‚úÖ SheetCols.REASON_REJECT = '{SheetCols.REASON_REJECT}'")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("ü§ñ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–î–ú–ò–ù–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
    print("=" * 60)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['GOOGLE_CREDS_JSON'] = '{"type": "service_account"}'
    os.environ['GOOGLE_SHEET_KEY'] = 'test_key'
    os.environ['SHEET_GID'] = '0'
    os.environ['BOSS_ID'] = '123456789'
    
    tests_passed = 0
    total_tests = 3
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    if test_constants():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 2: –ü–∞—Ç—Ç–µ—Ä–Ω—ã callback
    if await test_callback_patterns():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 3: –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if await test_admin_buttons():
        tests_passed += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(tests_passed/total_tests)*100:.1f}%")
    
    if tests_passed == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê.")
        return False

if __name__ == "__main__":
    import asyncio
    
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
