# -*- coding: utf-8 -*-
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode

import g_sheets
from constants import (
    SheetCols, AWAIT_REJECT_REASON, CALLBACK_APPROVE_PREFIX,
    CALLBACK_REJECT_PREFIX
)

logger = logging.getLogger(__name__)

def format_admin_notification(row_data: dict, row_index: int) -> dict:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞."""
    # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"format_admin_notification –≤—ã–∑–≤–∞–Ω–∞ —Å row_data: {row_data}")
    logger.info(f"format_admin_notification –≤—ã–∑–≤–∞–Ω–∞ —Å row_index: {row_index}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —É –Ω–∞—Å: –∏–∑ Google Sheets –∏–ª–∏ –∏–∑ context.user_data
    if 'initiator_fio' in row_data:
        # –î–∞–Ω–Ω—ã–µ –∏–∑ context.user_data (form_handlers)
        initiator_info = f"{row_data.get('initiator_fio', 'N/A')} ({row_data.get('initiator_username', 'N/A')})"
        owner_info = f"{row_data.get('owner_first_name', '')} {row_data.get('owner_last_name', '')}".strip()
        amount_val = row_data.get('amount', '-')
        card_type_str = row_data.get('card_type')
        card_number = row_data.get('card_number')
        category = row_data.get('category')
        issue_location = row_data.get('issue_location')
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ context.user_data")
    else:
        # –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets (—Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ SheetCols)
        initiator_info = f"{row_data.get(SheetCols.FIO_INITIATOR, 'N/A')} ({row_data.get(SheetCols.TG_TAG, 'N/A')})"
        owner_info = f"{row_data.get(SheetCols.OWNER_FIRST_NAME_COL, '')} {row_data.get(SheetCols.OWNER_LAST_NAME_COL, '')}".strip()
        amount_val = row_data.get(SheetCols.AMOUNT_COL, '-')
        card_type_str = row_data.get(SheetCols.CARD_TYPE_COL)
        card_number = row_data.get(SheetCols.CARD_NUMBER_COL)
        category = row_data.get(SheetCols.CATEGORY_COL)
        issue_location = row_data.get(SheetCols.ISSUE_LOCATION_COL)
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if not owner_info.strip():
        owner_info = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    if not card_number:
        card_number = "–ù–µ —É–∫–∞–∑–∞–Ω"
    if not category:
        category = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    if not issue_location:
        issue_location = "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    amount_text = f"{amount_val}{'%' if card_type_str == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'}"
    
    text = (
        f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ (‚Ññ{row_index})</b> üîî\n\n"
        f"<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {initiator_info}\n"
        f"<b>–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã:</b> {owner_info}\n"
        f"<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>{card_number}</code>\n"
        f"<b>–°—É–º–º–∞/–°–∫–∏–¥–∫–∞:</b> {amount_text}\n"
        f"<b>–°—Ç–∞—Ç—å—è:</b> {category}\n"
        f"<b>–ì–æ—Ä–æ–¥/–ë–∞—Ä:</b> {issue_location}\n\n"
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text}")
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"{CALLBACK_APPROVE_PREFIX}{row_index}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"{CALLBACK_REJECT_PREFIX}{row_index}")
        ]
    ])
    
    return {"text": text, "reply_markup": keyboard}
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"{CALLBACK_APPROVE_PREFIX}{row_index}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"{CALLBACK_REJECT_PREFIX}{row_index}")
        ]
    ])
    
    return {"text": text, "reply_markup": keyboard}

async def approve_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        row_index = int(query.data.split(':')[1])
    except (IndexError, ValueError):
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞—è–≤–∫–∏.", reply_markup=None)
        return

    success = g_sheets.update_cell_by_row(row_index, SheetCols.STATUS_COL, "–û–¥–æ–±—Ä–µ–Ω–æ")
    
    if success:
        await query.edit_message_text(query.message.text_html + "\n\n<b>–°—Ç–∞—Ç—É—Å: ‚úÖ –û–î–û–ë–†–ï–ù–û</b>", parse_mode=ParseMode.HTML, reply_markup=None)
        
        row_data = g_sheets.get_row_data(row_index)
        if row_data and row_data.get(SheetCols.TG_ID):
            try:
                owner_name = f"{row_data.get(SheetCols.OWNER_FIRST_NAME_COL)} {row_data.get(SheetCols.OWNER_LAST_NAME_COL)}"
                await context.bot.send_message(
                    chat_id=row_data[SheetCols.TG_ID],
                    text=f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è <b>{owner_name}</b> –±—ã–ª–∞ <b>–æ–¥–æ–±—Ä–µ–Ω–∞</b>.",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"Failed to send approval notification to user {row_data[SheetCols.TG_ID]}: {e}")
                boss_id = os.getenv("BOSS_ID")
                if boss_id:
                    await context.bot.send_message(boss_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row_data[SheetCols.TG_TAG]} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}.")

async def reject_request_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –ø—Ä–∏—á–∏–Ω—É."""
    query = update.callback_query
    await query.answer()

    try:
        row_index = int(query.data.split(':')[1])
    except (IndexError, ValueError):
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞—è–≤–∫–∏.", reply_markup=None)
        return ConversationHandler.END
        
    context.user_data['admin_action_row_index'] = row_index
    
    await query.edit_message_text(query.message.text_html + "\n\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...", parse_mode=ParseMode.HTML, reply_markup=None)
    await query.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}.")
    
    return AWAIT_REJECT_REASON

async def reject_request_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    reason = update.message.text
    row_index = context.user_data.get('admin_action_row_index')
    
    if not row_index:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
        
    g_sheets.update_cell_by_row(row_index, SheetCols.STATUS_COL, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    g_sheets.update_cell_by_row(row_index, SheetCols.REASON_REJECT, reason)
    
    await update.message.reply_text(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{row_index} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'.")
    
    row_data = g_sheets.get_row_data(row_index)
    if row_data and row_data.get(SheetCols.TG_ID):
        try:
            owner_name = f"{row_data.get(SheetCols.OWNER_FIRST_NAME_COL)} {row_data.get(SheetCols.OWNER_LAST_NAME_COL)}"
            await context.bot.send_message(
                chat_id=row_data[SheetCols.TG_ID],
                text=f"üòî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è <b>{owner_name}</b> –±—ã–ª–∞ <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>.\n\n<i>–ü—Ä–∏—á–∏–Ω–∞:</i> {reason}",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Failed to send rejection notification to user {row_data[SheetCols.TG_ID]}: {e}")
            boss_id = os.getenv("BOSS_ID")
            if boss_id:
                await context.bot.send_message(boss_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row_data[SheetCols.TG_TAG]} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}.")

    context.user_data.clear()
    return ConversationHandler.END
