# -*- coding: utf-8 -*-
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode

import g_sheets
from constants import (
    SheetCols, AWAIT_REJECT_REASON, CALLBACK_APPROVE_PREFIX,
    CALLBACK_REJECT_PREFIX
)

logger = logging.getLogger(__name__)

def format_admin_notification(row_data: dict, row_index: int) -> dict:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞."""
    # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"format_admin_notification –≤—ã–∑–≤–∞–Ω–∞ —Å row_data: {row_data}")
    logger.info(f"format_admin_notification –≤—ã–∑–≤–∞–Ω–∞ —Å row_index: {row_index}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —É –Ω–∞—Å: –∏–∑ Google Sheets –∏–ª–∏ –∏–∑ context.user_data
    if 'initiator_fio' in row_data:
        # –î–∞–Ω–Ω—ã–µ –∏–∑ context.user_data (form_handlers)
        initiator_info = f"{row_data.get('initiator_fio', 'N/A')} ({row_data.get('initiator_username', 'N/A')})"
        owner_info = f"{row_data.get('owner_first_name', '')} {row_data.get('owner_last_name', '')}".strip()
        amount_val = row_data.get('amount', '-')
        card_type_str = row_data.get('card_type')
        card_number = row_data.get('card_number')
        category = row_data.get('category')
        issue_location = row_data.get('issue_location')
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ context.user_data")
    else:
        # –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets (—Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ SheetCols)
        initiator_info = f"{row_data.get(SheetCols.FIO_INITIATOR, 'N/A')} ({row_data.get(SheetCols.TG_TAG, 'N/A')})"
        owner_info = f"{row_data.get(SheetCols.OWNER_FIRST_NAME_COL, '')} {row_data.get(SheetCols.OWNER_LAST_NAME_COL, '')}".strip()
        amount_val = row_data.get(SheetCols.AMOUNT_COL, '-')
        card_type_str = row_data.get(SheetCols.CARD_TYPE_COL)
        card_number = row_data.get(SheetCols.CARD_NUMBER_COL)
        category = row_data.get(SheetCols.CATEGORY_COL)
        issue_location = row_data.get(SheetCols.ISSUE_LOCATION_COL)
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if not owner_info.strip():
        owner_info = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    if not card_number:
        card_number = "–ù–µ —É–∫–∞–∑–∞–Ω"
    if not category:
        category = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    if not issue_location:
        issue_location = "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    amount_text = f"{amount_val}{'%' if card_type_str == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'}"
    
    text = (
        f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ (‚Ññ{row_index})</b> üîî\n\n"
        f"<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {initiator_info}\n"
        f"<b>–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã:</b> {owner_info}\n"
        f"<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>{card_number}</code>\n"
        f"<b>–°—É–º–º–∞/–°–∫–∏–¥–∫–∞:</b> {amount_text}\n"
        f"<b>–°—Ç–∞—Ç—å—è:</b> {category}\n"
        f"<b>–ì–æ—Ä–æ–¥/–ë–∞—Ä:</b> {issue_location}\n\n"
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text}")
    
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"{CALLBACK_APPROVE_PREFIX}{row_index}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"{CALLBACK_REJECT_PREFIX}{row_index}")
        ]
    ])
    
    return {"text": text, "reply_markup": keyboard}

async def approve_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    try:
        row_index = int(query.data.split(':')[1])
        logger.info(f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}")
    except (IndexError, ValueError):
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {query.data}")
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞—è–≤–∫–∏.", reply_markup=None)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
    success = g_sheets.update_cell_by_row(row_index, SheetCols.STATUS_COL, "–û–¥–æ–±—Ä–µ–Ω–æ")
    
    if success:
        logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{row_index} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–û–¥–æ–±—Ä–µ–Ω–æ'")
        
        # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
        approval_success = g_sheets.update_cell_by_row(row_index, SheetCols.APPROVAL_STATUS, "–û–¥–æ–±—Ä–µ–Ω–æ")
        if approval_success:
            logger.info(f"–ü–æ–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{row_index} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await query.edit_message_text(
            query.message.text_html + "\n\n<b>–°—Ç–∞—Ç—É—Å: ‚úÖ –û–î–û–ë–†–ï–ù–û</b>", 
            parse_mode=ParseMode.HTML, 
            reply_markup=None
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        row_data = g_sheets.get_row_data(row_index)
        if row_data and row_data.get(SheetCols.TG_ID):
            try:
                user_id = row_data[SheetCols.TG_ID]
                owner_name = f"{row_data.get(SheetCols.OWNER_FIRST_NAME_COL, '')} {row_data.get(SheetCols.OWNER_LAST_NAME_COL, '')}".strip()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"üéâ <b>–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è <b>{owner_name}</b> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞.\n\n‚úÖ –ö–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –±–æ—Å—Å–∞ –æ–± –æ—à–∏–±–∫–µ
                boss_id = os.getenv("BOSS_ID")
                if boss_id:
                    await context.bot.send_message(
                        boss_id, 
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row_data.get(SheetCols.TG_TAG, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}.\n\n–û—à–∏–±–∫–∞: {str(e)}"
                    )
        else:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_index} –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TG_ID")
            
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}")
        await query.edit_message_text(
            query.message.text_html + "\n\n<b>‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</b>", 
            parse_mode=ParseMode.HTML, 
            reply_markup=None
        )

async def reject_request_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –ø—Ä–∏—á–∏–Ω—É."""
    query = update.callback_query
    await query.answer()

    try:
        row_index = int(query.data.split(':')[1])
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}")
    except (IndexError, ValueError):
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {query.data}")
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞—è–≤–∫–∏.", reply_markup=None)
        return ConversationHandler.END
        
    context.user_data['admin_action_row_index'] = row_index
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        query.message.text_html + "\n\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...", 
        parse_mode=ParseMode.HTML, 
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã
    await query.message.reply_text(
        f"üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}:\n\n"
        "üí° <i>–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –∑–∞—è–≤–∏—Ç–µ–ª—é –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ –±—É–¥—É—â–µ–º.</i>",
        parse_mode=ParseMode.HTML
    )
    
    return AWAIT_REJECT_REASON

async def reject_request_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    reason = update.message.text.strip()
    row_index = context.user_data.get('admin_action_row_index')
    
    if not row_index:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    if not reason:
        await update.message.reply_text("‚ùå –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        return AWAIT_REJECT_REASON
        
    logger.info(f"–û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É ‚Ññ{row_index} —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—á–∏–Ω—É –≤ Google Sheets
    status_updated = g_sheets.update_cell_by_row(row_index, SheetCols.STATUS_COL, "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    reason_updated = g_sheets.update_cell_by_row(row_index, SheetCols.REASON_REJECT, reason)
    
    if status_updated and reason_updated:
        logger.info(f"–°—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{row_index} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{row_index} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞—è–≤–∏—Ç–µ–ª—é."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        row_data = g_sheets.get_row_data(row_index)
        if row_data and row_data.get(SheetCols.TG_ID):
            try:
                user_id = row_data[SheetCols.TG_ID]
                owner_name = f"{row_data.get(SheetCols.OWNER_FIRST_NAME_COL, '')} {row_data.get(SheetCols.OWNER_LAST_NAME_COL, '')}".strip()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.send_message(
                    chat_id=user_id,
                    text=(
                        f"üòî <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è <b>{owner_name}</b> –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
                        f"üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø—Ä–∞–≤–∏–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.</i>"
                    ),
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –±–æ—Å—Å–∞ –æ–± –æ—à–∏–±–∫–µ
                boss_id = os.getenv("BOSS_ID")
                if boss_id:
                    await context.bot.send_message(
                        boss_id, 
                        f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row_data.get(SheetCols.TG_TAG, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}.\n\n–û—à–∏–±–∫–∞: {str(e)}"
                    )
        else:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_index} –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TG_ID")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞/–ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ{row_index}")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 'admin_action_row_index' in context.user_data:
        del context.user_data['admin_action_row_index']
    
    return ConversationHandler.END
