#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —ç–∫—Å–ø–æ—Ä—Ç–æ–º
"""

import logging
import sqlite3
from datetime import datetime, timezone, timedelta
from constants import SheetCols

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_moscow_timezone():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    print("üïê –ü–†–û–í–ï–†–ö–ê –ú–û–°–ö–û–í–°–ö–û–ì–û –í–†–ï–ú–ï–ù–ò")
    print("=" * 40)
    
    moscow_tz = timezone(timedelta(hours=3))
    moscow_time = datetime.now(moscow_tz)
    utc_time = datetime.now(timezone.utc)
    
    print(f"UTC –≤—Ä–µ–º—è: {utc_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {moscow_time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —á–∞—Å–∞—Ö –º–µ–∂–¥—É –º–æ—Å–∫–æ–≤—Å–∫–∏–º –∏ UTC –≤—Ä–µ–º–µ–Ω–µ–º
    utc_hour = utc_time.hour
    moscow_hour = moscow_time.hour
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–Ω–∏—Ü—É
    hour_diff = moscow_hour - utc_hour
    if hour_diff < 0:
        hour_diff += 24  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    
    print(f"–†–∞–∑–Ω–∏—Ü–∞: +{hour_diff} —á–∞—Å–æ–≤")
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–º–µ—â–µ–Ω–∏—é timezone
    moscow_offset = moscow_time.utcoffset().total_seconds() / 3600
    print(f"–°–º–µ—â–µ–Ω–∏–µ timezone: +{moscow_offset} —á–∞—Å–æ–≤")
    
    if moscow_offset == 3.0:
        print("‚úÖ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (+3 —á–∞—Å–∞ –æ—Ç UTC)")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏! –û–∂–∏–¥–∞–ª–æ—Å—å +3, –ø–æ–ª—É—á–µ–Ω–æ +{moscow_offset}")
        return False

def simulate_form_data_with_moscow_time():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    print("\nüìù –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–ë–û–†–ê –î–ê–ù–ù–´–• –§–û–†–ú–´")
    print("=" * 40)
    
    # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = timezone(timedelta(hours=3))
    moscow_time = datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S')
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    mock_user_data = {
        'tg_id': '987654321',
        'username': 'testuser',
        'full_name': '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
        'email': 'petrov@example.com',
        'job_title': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
        'phone': '+7 900 987-65-43'
    }
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    mock_form_data = {
        'owner_first_name': '–ê–Ω–Ω–∞',
        'owner_last_name': '–°–∏–¥–æ—Ä–æ–≤–∞',
        'reason': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞',
        'card_type': 'VIP –∫–∞—Ä—Ç–∞',
        'card_number': '9876543210',
        'category': '–ü—Ä–æ—Ü–µ–Ω—Ç',
        'amount': '15%',
        'frequency': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
        'issue_location': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞—Ä'
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_data = {
        SheetCols.TIMESTAMP: moscow_time,
        SheetCols.TG_ID: mock_user_data['tg_id'],
        SheetCols.TG_TAG: f"@{mock_user_data['username']}",
        SheetCols.EMAIL: mock_user_data['email'],
        SheetCols.FIO_INITIATOR: mock_user_data['full_name'],
        SheetCols.JOB_TITLE: mock_user_data['job_title'],
        SheetCols.PHONE_INITIATOR: mock_user_data['phone'],
        SheetCols.OWNER_FIRST_NAME_COL: mock_form_data['owner_first_name'],
        SheetCols.OWNER_LAST_NAME_COL: mock_form_data['owner_last_name'],
        SheetCols.REASON_COL: mock_form_data['reason'],
        SheetCols.CARD_TYPE_COL: mock_form_data['card_type'],
        SheetCols.CARD_NUMBER_COL: mock_form_data['card_number'],
        SheetCols.CATEGORY_COL: mock_form_data['category'],
        SheetCols.AMOUNT_COL: mock_form_data['amount'],
        SheetCols.FREQUENCY_COL: mock_form_data['frequency'],
        SheetCols.ISSUE_LOCATION_COL: mock_form_data['issue_location'],
        SheetCols.STATUS_COL: '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'
    }
    
    print(f"üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º:")
    print(f"   –í—Ä–µ–º—è: {export_data[SheetCols.TIMESTAMP]} (–ú–æ—Å–∫–≤–∞ +3)")
    print(f"   –í—Å–µ–≥–æ –ø–æ–ª–µ–π: {len(export_data)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    empty_fields = [key for key, value in export_data.items() if not value]
    if empty_fields:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—É—Å—Ç—ã–µ –ø–æ–ª—è: {empty_fields}")
        return False
    else:
        print("‚úÖ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ (—Å–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ g_sheets.py)
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ú–ê–ü–ü–ò–ù–ì–ê –î–ê–ù–ù–´–•:")
    headers = list(export_data.keys())  # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ Google Sheets
    
    # –ù–æ–≤–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞
    final_row = []
    for header in headers:
        value = ''
        for const_value, data_value in export_data.items():
            if const_value == header:
                value = data_value or ''
                break
        final_row.append(value)
    
    print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏ ({len(headers)}): {len([h for h in headers if h])}")
    print(f"   –ó–Ω–∞—á–µ–Ω–∏—è ({len(final_row)}): {len([v for v in final_row if v])}")
    
    if len(final_row) == len(headers) and all(final_row):
        print("‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö")
        return False

def main():
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    time_ok = check_moscow_timezone()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä –∏ –º–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    data_ok = simulate_form_data_with_moscow_time()
    
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   ‚úÖ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {'–û–ö' if time_ok else '–û–®–ò–ë–ö–ê'}")
    print(f"   ‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: {'–û–ö' if data_ok else '–û–®–ò–ë–ö–ê'}")
    print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    
    if time_ok and data_ok:
        print(f"\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"   ‚úì –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (+3 —á–∞—Å–∞) –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        print(f"   ‚úì –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç (17/17 –ø–æ–ª–µ–π)")
        print(f"   ‚úì –õ–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print(f"   ‚úì –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
    else:
        print(f"\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    main()
