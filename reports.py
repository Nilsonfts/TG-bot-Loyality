# -*- coding: utf-8 -*-
import logging
import os
from datetime import datetime, timedelta
from collections import Counter
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

import g_sheets
from constants import SheetCols

logger = logging.getLogger(__name__)

async def send_daily_summary(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É."""
    boss_id = os.getenv("BOSS_ID")
    if not boss_id:
        logger.warning("BOSS_ID not set, skipping daily report.")
        return

    logger.info("Generating daily summary...")
    all_cards = g_sheets.get_cards_from_sheet(user_id=None)
    
    if not all_cards:
        await context.bot.send_message(chat_id=boss_id, text="üìÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return

    yesterday = datetime.now() - timedelta(days=1)
    recent_cards = []
    
    for card in all_cards:
        try:
            # –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∫ –æ–±—ä–µ–∫—Ç—É datetime
            timestamp_str = card.get(SheetCols.TIMESTAMP)
            card_time = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
            if card_time > yesterday:
                recent_cards.append(card)
        except (TypeError, ValueError):
            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
            
    pending_count = sum(1 for card in all_cards if card.get(SheetCols.STATUS_COL) == '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏')
    new_in_24h = len(recent_cards)
    approved_in_24h = sum(1 for card in recent_cards if card.get(SheetCols.STATUS_COL) == '–û–¥–æ–±—Ä–µ–Ω–æ')
    rejected_in_24h = sum(1 for card in recent_cards if card.get(SheetCols.STATUS_COL) == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')

    report_text = (
        f"<b>üìÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ | {datetime.now():%d-%m-%Y}</b>\n\n"
        f"<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
        f"  - –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: <b>{new_in_24h}</b>\n"
        f"  - –û–¥–æ–±—Ä–µ–Ω–æ: <b>{approved_in_24h}</b>\n"
        f"  - –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{rejected_in_24h}</b>\n\n"
        f"<b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n"
        f"  - üî• –û–∂–∏–¥–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è: <b>{pending_count}</b>"
    )

    await context.bot.send_message(chat_id=boss_id, text=report_text, parse_mode=ParseMode.HTML)
