# -*- coding: utf-8 -*-
import logging
import os
from datetime import datetime, timedelta
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

import g_sheets
import utils
from constants import SheetCols

logger = logging.getLogger(__name__)

async def send_daily_summary(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É."""
    boss_id = os.getenv("BOSS_ID")
    if not boss_id:
        logger.warning("BOSS_ID not set, skipping daily report.")
        return

    logger.info("Generating daily summary...")
    all_cards = g_sheets.get_cards_from_sheet(user_id=None)
    
    if not all_cards:
        await context.bot.send_message(chat_id=boss_id, text="üìÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return

    yesterday = datetime.now() - timedelta(days=1)
    recent_cards = []
    
    for card in all_cards:
        try:
            timestamp_str = card.get(SheetCols.TIMESTAMP)
            card_time = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
            if card_time > yesterday:
                recent_cards.append(card)
        except (TypeError, ValueError):
            continue 
            
    pending_count = sum(1 for card in all_cards if card.get(SheetCols.STATUS_COL) == '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏')
    new_in_24h = len(recent_cards)
    approved_in_24h = sum(1 for card in recent_cards if card.get(SheetCols.STATUS_COL) == '–û–¥–æ–±—Ä–µ–Ω–æ')
    rejected_in_24h = sum(1 for card in recent_cards if card.get(SheetCols.STATUS_COL) == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')

    report_text = (
        f"<b>üìÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ | {datetime.now():%d-%m-%Y}</b>\n\n"
        f"<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n"
        f"  - –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: <b>{new_in_24h}</b>\n"
        f"  - –û–¥–æ–±—Ä–µ–Ω–æ: <b>{approved_in_24h}</b>\n"
        f"  - –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{rejected_in_24h}</b>\n\n"
        f"<b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>\n"
        f"  - üî• –û–∂–∏–¥–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è: <b>{pending_count}</b>"
    )

    await context.bot.send_message(chat_id=boss_id, text=report_text, parse_mode=ParseMode.HTML)

async def send_user_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    logger.info("Checking for users to send reminders...")
    
    users_for_reminder = utils.get_users_for_reminder()
    
    if not users_for_reminder:
        logger.info("No users need reminders at this time.")
        return
    
    for user in users_for_reminder:
        try:
            reminder_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.get('fio', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n\n"
                "–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! ü§î\n\n"
                "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ üìù –ü–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –∫–∞—Ä—Ç—É\n"
                "‚Ä¢ üîç –ù–∞–π—Ç–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞—è–≤–∫–∏\n"
                "‚Ä¢ üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
                "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! ü§ñ"
            )
            
            await context.bot.send_message(
                chat_id=user['tg_id'],
                text=reminder_text
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            utils.update_user_activity(user['tg_id'])
            
            logger.info(f"Sent reminder to user {user['tg_id']}")
            
        except Exception as e:
            logger.error(f"Failed to send reminder to user {user['tg_id']}: {e}")
    
    logger.info(f"Sent {len(users_for_reminder)} reminder(s)")

async def send_weekly_analytics(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∞–¥–º–∏–Ω—É."""
    boss_id = os.getenv("BOSS_ID")
    if not boss_id:
        logger.warning("BOSS_ID not set, skipping weekly analytics.")
        return

    logger.info("Generating weekly analytics...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î (–±—ã—Å—Ç—Ä–µ–µ)
    stats = utils.get_statistics()
    
    if not stats:
        await context.bot.send_message(
            chat_id=boss_id,
            text="üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
    week_ago = datetime.now() - timedelta(days=7)
    all_cards = g_sheets.get_cards_from_sheet(user_id=None)
    weekly_cards = []
    
    for card in all_cards:
        try:
            timestamp_str = card.get(SheetCols.TIMESTAMP)
            card_time = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
            if card_time > week_ago:
                weekly_cards.append(card)
        except (TypeError, ValueError):
            continue
    
    weekly_new = len(weekly_cards)
    weekly_approved = sum(1 for card in weekly_cards if card.get(SheetCols.STATUS_COL) == '–û–¥–æ–±—Ä–µ–Ω–æ')
    weekly_rejected = sum(1 for card in weekly_cards if card.get(SheetCols.STATUS_COL) == '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
    
    approval_rate = (weekly_approved / weekly_new * 100) if weekly_new > 0 else 0
    
    analytics_text = (
        f"<b>üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ | {datetime.now():%d-%m-%Y}</b>\n\n"
        f"<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:</b>\n"
        f"  - –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: <b>{weekly_new}</b>\n"
        f"  - –û–¥–æ–±—Ä–µ–Ω–æ: <b>{weekly_approved}</b>\n"
        f"  - –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{weekly_rejected}</b>\n"
        f"  - –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: <b>{approval_rate:.1f}%</b>\n\n"
        f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"  - –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{stats.get('total', 0)}</b>\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    by_status = stats.get('by_status', {})
    if by_status:
        analytics_text += "\n<b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        for status, count in by_status.items():
            analytics_text += f"  - {status}: <b>{count}</b>\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∫–∞—Ä—Ç
    by_card_type = stats.get('by_card_type', {})
    if by_card_type:
        analytics_text += "\n<b>–ü–æ —Ç–∏–ø–∞–º –∫–∞—Ä—Ç:</b>\n"
        for card_type, count in by_card_type.items():
            analytics_text += f"  - {card_type}: <b>{count}</b>\n"

    await context.bot.send_message(chat_id=boss_id, text=analytics_text, parse_mode=ParseMode.HTML)
