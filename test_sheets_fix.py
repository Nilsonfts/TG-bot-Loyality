#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–µ–∫ –≤ Google Sheets
"""

import sys
import os
import logging
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_constants_mapping():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ö–û–ù–°–¢–ê–ù–¢")
    print("=" * 50)
    
    from constants import SheetCols
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    expected_headers = [
        '–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏',
        'ID–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞',
        '–¢–ì–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞',
        '–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã',
        '–§–ò–û –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞',
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
        '–¢–µ–ª–µ—Ñ–æ–Ω –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞',
        '–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã',
        '–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã',
        '–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –±–∞—Ä—Ç–µ—Ä–∞/—Å–∫–∏–¥–∫–∏',
        '–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?',
        '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
        '–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç',
        '–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞ –∏–ª–∏ % —Å–∫–∏–¥–∫–∏',
        '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ä—Ç–µ—Ä–∞',
        '–ë–ê–†',
        '–ó–ê–Ø–í–ö–ê',
        '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –°–ê–î/–î–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –ø–æ —Ä–µ–∫–ª–∞–º–µ',
        'STARTDATE (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —á–µ—Ç–≤–µ—Ä–≥–∞–º –ø–æ—Å–ª–µ 22:00)',
        '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    constants_to_check = {
        'TIMESTAMP': SheetCols.TIMESTAMP,
        'TG_ID': SheetCols.TG_ID,
        'TG_TAG': SheetCols.TG_TAG,
        'EMAIL': SheetCols.EMAIL,
        'FIO_INITIATOR': SheetCols.FIO_INITIATOR,
        'JOB_TITLE': SheetCols.JOB_TITLE,
        'PHONE_INITIATOR': SheetCols.PHONE_INITIATOR,
        'OWNER_FIRST_NAME_COL': SheetCols.OWNER_FIRST_NAME_COL,
        'OWNER_LAST_NAME_COL': SheetCols.OWNER_LAST_NAME_COL,
        'REASON_COL': SheetCols.REASON_COL,
        'CARD_TYPE_COL': SheetCols.CARD_TYPE_COL,
        'CARD_NUMBER_COL': SheetCols.CARD_NUMBER_COL,
        'CATEGORY_COL': SheetCols.CATEGORY_COL,
        'AMOUNT_COL': SheetCols.AMOUNT_COL,
        'FREQUENCY_COL': SheetCols.FREQUENCY_COL,
        'ISSUE_LOCATION_COL': SheetCols.ISSUE_LOCATION_COL,
        'STATUS_COL': SheetCols.STATUS_COL,
        'APPROVAL_STATUS': SheetCols.APPROVAL_STATUS,
        'START_DATE': SheetCols.START_DATE,
        'ACTIVATED': SheetCols.ACTIVATED
    }
    
    all_good = True
    
    for const_name, const_value in constants_to_check.items():
        if const_value in expected_headers:
            print(f"‚úÖ {const_name} = '{const_value}' - –ù–ê–ô–î–ï–ù –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")
        else:
            print(f"‚ùå {const_name} = '{const_value}' - –ù–ï –ù–ê–ô–î–ï–ù –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")
            all_good = False
    
    return all_good

def test_write_row_mapping():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –≤ write_row"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–ü–ü–ò–ù–ì–ê –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'submission_time': '2025-07-16 08:30:00',
        'tg_user_id': '123456789',
        'initiator_username': '@testuser',
        'initiator_email': 'test@example.com',
        'initiator_fio': '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á',
        'initiator_job_title': '–¢–µ—Å—Ç–µ—Ä',
        'initiator_phone': '89991234567',
        'owner_first_name': '–ò–≤–∞–Ω',
        'owner_last_name': '–ò–≤–∞–Ω–æ–≤',
        'reason': '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞',
        'card_type': '–ë–∞—Ä—Ç–µ—Ä',
        'card_number': '89991234567',
        'category': '–ê–†–¢',
        'amount': '5000',
        'frequency': '–†–∞–∑–æ–≤–∞—è',
        'issue_location': '–ú–æ—Å–∫–≤–∞',
        'status': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'
    }
    
    from constants import SheetCols
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞–∫ –≤ write_row
    row_to_write = {
        SheetCols.TIMESTAMP: test_data.get('submission_time', ''),
        SheetCols.TG_ID: test_data.get('tg_user_id', ''),
        SheetCols.TG_TAG: test_data.get('initiator_username', ''),
        SheetCols.EMAIL: test_data.get('initiator_email', ''),
        SheetCols.FIO_INITIATOR: test_data.get('initiator_fio', ''),
        SheetCols.JOB_TITLE: test_data.get('initiator_job_title', ''),
        SheetCols.PHONE_INITIATOR: test_data.get('initiator_phone', ''),
        SheetCols.OWNER_FIRST_NAME_COL: test_data.get('owner_first_name', ''),
        SheetCols.OWNER_LAST_NAME_COL: test_data.get('owner_last_name', ''),
        SheetCols.REASON_COL: test_data.get('reason', ''),
        SheetCols.CARD_TYPE_COL: test_data.get('card_type', ''),
        SheetCols.CARD_NUMBER_COL: test_data.get('card_number', ''),
        SheetCols.CATEGORY_COL: test_data.get('category', ''),
        SheetCols.AMOUNT_COL: test_data.get('amount', ''),
        SheetCols.FREQUENCY_COL: test_data.get('frequency', ''),
        SheetCols.ISSUE_LOCATION_COL: test_data.get('issue_location', ''),
        SheetCols.STATUS_COL: test_data.get('status', ''),
        SheetCols.APPROVAL_STATUS: '',
        SheetCols.START_DATE: '',
        SheetCols.ACTIVATED: '',
        SheetCols.REASON_REJECT: test_data.get('reason_reject', '')
    }
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ø–ø–∏–Ω–≥–∞:")
    for key, value in row_to_write.items():
        status = "‚úÖ" if value else "‚ö†Ô∏è"
        print(f"{status} '{key}' = '{value}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    important_fields = [
        SheetCols.TIMESTAMP, SheetCols.TG_ID, SheetCols.FIO_INITIATOR,
        SheetCols.OWNER_FIRST_NAME_COL, SheetCols.CARD_NUMBER_COL, 
        SheetCols.AMOUNT_COL, SheetCols.STATUS_COL
    ]
    
    all_filled = True
    for field in important_fields:
        if not row_to_write.get(field):
            print(f"‚ùå –í–∞–∂–Ω–æ–µ –ø–æ–ª–µ '{field}' –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
            all_filled = False
    
    if all_filled:
        print("‚úÖ –í—Å–µ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
    
    return all_filled

async def test_update_cell_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é update_cell_by_row"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò UPDATE_CELL_BY_ROW")
    print("=" * 50)
    
    import g_sheets
    from constants import SheetCols
    
    # –ú–æ–∫–∞–µ–º Google Sheets API
    with patch('g_sheets.get_gspread_client') as mock_client_func, \
         patch('g_sheets.get_sheet_by_gid') as mock_sheet_func:
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        mock_client = Mock()
        mock_sheet = Mock()
        mock_client_func.return_value = mock_client
        mock_sheet_func.return_value = mock_sheet
        
        # –ú–æ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        mock_headers = [
            '–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏', 'ID–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', '–¢–ì–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞',
            '–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã', '–§–ò–û –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
            '–¢–µ–ª–µ—Ñ–æ–Ω –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', '–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã', '–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã',
            '–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –±–∞—Ä—Ç–µ—Ä–∞/—Å–∫–∏–¥–∫–∏', '–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?',
            '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', '–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç', '–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞ –∏–ª–∏ % —Å–∫–∏–¥–∫–∏',
            '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ä—Ç–µ—Ä–∞', '–ë–ê–†', '–ó–ê–Ø–í–ö–ê',
            '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –°–ê–î/–î–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –ø–æ —Ä–µ–∫–ª–∞–º–µ', 'STARTDATE (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —á–µ—Ç–≤–µ—Ä–≥–∞–º –ø–æ—Å–ª–µ 22:00)',
            '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'
        ]
        mock_sheet.row_values.return_value = mock_headers
        mock_sheet.update_cell.return_value = True
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        try:
            result = g_sheets.update_cell_by_row(0, SheetCols.STATUS_COL, "–û–¥–æ–±—Ä–µ–Ω–æ")
            
            if result:
                print("‚úÖ –§—É–Ω–∫—Ü–∏—è update_cell_by_row —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update_cell –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                mock_sheet.update_cell.assert_called_once()
                call_args = mock_sheet.update_cell.call_args[0]
                
                print(f"üìç –í—ã–∑–æ–≤ update_cell: —Å—Ç—Ä–æ–∫–∞={call_args[0]}, —Å—Ç–æ–ª–±–µ—Ü={call_args[1]}, –∑–Ω–∞—á–µ–Ω–∏–µ='{call_args[2]}'")
                
                # –û–∂–∏–¥–∞–µ–º: —Å—Ç—Ä–æ–∫–∞ 2 (0 + 2), —Å—Ç–æ–ª–±–µ—Ü 17 (–∏–Ω–¥–µ–∫—Å '–ó–ê–Ø–í–ö–ê' + 1)
                expected_row = 2
                expected_col = mock_headers.index(SheetCols.STATUS_COL) + 1
                
                if call_args[0] == expected_row and call_args[1] == expected_col:
                    print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                    return True
                else:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å ({expected_row}, {expected_col}), –ø–æ–ª—É—á–µ–Ω–æ ({call_args[0]}, {call_args[1]})")
                    return False
            else:
                print("‚ùå –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ False")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô GOOGLE SHEETS")
    print("=" * 60)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['GOOGLE_CREDS_JSON'] = '{"type": "service_account"}'
    os.environ['GOOGLE_SHEET_KEY'] = 'test_key'
    os.environ['SHEET_GID'] = '0'
    
    tests_passed = 0
    total_tests = 3
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    if test_constants_mapping():
        tests_passed += 1
        print("‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º")
    else:
        print("‚ùå –¢–ï–°–¢ 1 –ù–ï –ü–†–û–ô–î–ï–ù: –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º")
    
    # –¢–µ—Å—Ç 2: –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    if test_write_row_mapping():
        tests_passed += 1
        print("‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    else:
        print("‚ùå –¢–ï–°–¢ 2 –ù–ï –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    import asyncio
    if asyncio.run(test_update_cell_function()):
        tests_passed += 1
        print("‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù: –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –¢–ï–°–¢ 3 –ù–ï –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(tests_passed/total_tests)*100:.1f}%")
    
    if tests_passed == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–†–†–ï–ö–¢–ù–´!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê.")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
