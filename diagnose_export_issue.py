#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –≤ Google Sheets
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import logging
from datetime import datetime, timezone, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import utils
from constants import SheetCols

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def diagnose_export_issue():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ–ø–æ–ª–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–æ–π."""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –í–´–ì–†–£–ó–ö–û–ô –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("-" * 50)
    
    try:
        utils.init_local_db()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = {
            'tg_user_id': 'diagnosis_test_user',
            'initiator_fio': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'initiator_email': 'diagnosis@test.com',
            'initiator_job_title': '–î–∏–∞–≥–Ω–æ—Å—Ç',
            'initiator_phone': '+7 (999) 000-00-00',
            'initiator_username': '@diagnosis_test'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_result = utils.save_user_to_local_db(test_user)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_result}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        initiator_data = utils.get_initiator_from_local_db('diagnosis_test_user')
        if initiator_data:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã:")
            for key, value in initiator_data.items():
                print(f"   {key}: '{value}'")
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –ù–ï –ø–æ–ª—É—á–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 2. –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    print("\n2Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –§–û–†–ú–´")
    print("-" * 50)
    
    try:
        # –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–∏–∑ –ë–î)
        initiator_data = utils.get_initiator_from_local_db('diagnosis_test_user')
        
        # –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (–≤–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        form_data = {
            'owner_last_name': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π',
            'owner_first_name': '–í–ª–∞–¥–µ–ª–µ—Ü',
            'reason': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã',
            'card_type': '–ë–∞—Ä—Ç–µ—Ä',
            'card_number': '9999888877',
            'category': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'amount': '15000',
            'frequency': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
            'issue_location': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä'
        }
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        moscow_tz = timezone(timedelta(hours=3))
        moscow_time = datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S')
        
        system_data = {
            'submission_time': moscow_time,
            'tg_user_id': 'diagnosis_test_user',
            'status': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        complete_data = {}
        if initiator_data:
            complete_data.update(initiator_data)
        complete_data.update(form_data)
        complete_data.update(system_data)
        
        print(f"üìä –°–û–ë–†–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï ({len(complete_data)} –ø–æ–ª–µ–π):")
        for i, (key, value) in enumerate(complete_data.items(), 1):
            print(f"   {i:2d}. {key}: '{value}'")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
    print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ú–ê–ü–ü–ò–ù–ì–ê –ö–û–ù–°–¢–ê–ù–¢")
    print("-" * 50)
    
    try:
        # –í—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã Google Sheets
        constants = {
            'TIMESTAMP': SheetCols.TIMESTAMP,
            'TG_ID': SheetCols.TG_ID,
            'TG_TAG': SheetCols.TG_TAG,
            'EMAIL': SheetCols.EMAIL,
            'FIO_INITIATOR': SheetCols.FIO_INITIATOR,
            'JOB_TITLE': SheetCols.JOB_TITLE,
            'PHONE_INITIATOR': SheetCols.PHONE_INITIATOR,
            'OWNER_FIRST_NAME_COL': SheetCols.OWNER_FIRST_NAME_COL,
            'OWNER_LAST_NAME_COL': SheetCols.OWNER_LAST_NAME_COL,
            'REASON_COL': SheetCols.REASON_COL,
            'CARD_TYPE_COL': SheetCols.CARD_TYPE_COL,
            'CARD_NUMBER_COL': SheetCols.CARD_NUMBER_COL,
            'CATEGORY_COL': SheetCols.CATEGORY_COL,
            'AMOUNT_COL': SheetCols.AMOUNT_COL,
            'FREQUENCY_COL': SheetCols.FREQUENCY_COL,
            'ISSUE_LOCATION_COL': SheetCols.ISSUE_LOCATION_COL,
            'STATUS_COL': SheetCols.STATUS_COL,
        }
        
        print("üîç –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Google Sheets:")
        for const_name, const_value in constants.items():
            print(f"   {const_name} = '{const_value}'")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö -> –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        field_mapping = {
            'submission_time': SheetCols.TIMESTAMP,
            'tg_user_id': SheetCols.TG_ID,
            'initiator_username': SheetCols.TG_TAG,
            'initiator_email': SheetCols.EMAIL,
            'initiator_fio': SheetCols.FIO_INITIATOR,
            'initiator_job_title': SheetCols.JOB_TITLE,
            'initiator_phone': SheetCols.PHONE_INITIATOR,
            'owner_first_name': SheetCols.OWNER_FIRST_NAME_COL,
            'owner_last_name': SheetCols.OWNER_LAST_NAME_COL,
            'reason': SheetCols.REASON_COL,
            'card_type': SheetCols.CARD_TYPE_COL,
            'card_number': SheetCols.CARD_NUMBER_COL,
            'category': SheetCols.CATEGORY_COL,
            'amount': SheetCols.AMOUNT_COL,
            'frequency': SheetCols.FREQUENCY_COL,
            'issue_location': SheetCols.ISSUE_LOCATION_COL,
            'status': SheetCols.STATUS_COL,
        }
        
        print(f"\nüìã –ú–ê–ü–ü–ò–ù–ì –ü–û–õ–ï–ô:")
        for data_field, sheet_column in field_mapping.items():
            value = complete_data.get(data_field, '')
            status = "‚úÖ" if value else "‚ùå"
            print(f"   {status} {data_field} ‚Üí '{sheet_column}': '{value}'")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –æ—Å—Ç–∞—é—Ç—Å—è –ø—É—Å—Ç—ã–º–∏
        empty_fields = [field for field, value in complete_data.items() if not value]
        missing_mappings = [field for field in field_mapping.keys() if field not in complete_data]
        
        if empty_fields:
            print(f"\n‚ö†Ô∏è  –ü–£–°–¢–´–ï –ü–û–õ–Ø ({len(empty_fields)}):")
            for field in empty_fields:
                print(f"   ‚Ä¢ {field}")
                
        if missing_mappings:
            print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–û–õ–Ø ({len(missing_mappings)}):")
            for field in missing_mappings:
                print(f"   ‚Ä¢ {field}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞: {e}")
    
    # 4. –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–†–û–¶–ï–°–°–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_scenario = {
        'initiator_username': '@diagnosis_test',
        'initiator_email': 'diagnosis@test.com', 
        'initiator_fio': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'initiator_job_title': '–î–∏–∞–≥–Ω–æ—Å—Ç',
        'initiator_phone': '+7 (999) 000-00-00',
        'owner_first_name': '–í–ª–∞–¥–µ–ª–µ—Ü',
        'owner_last_name': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π',
        'reason': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞',
        'card_type': '–ë–∞—Ä—Ç–µ—Ä',
        'card_number': '9999888877',
        'category': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        'amount': '15000',
        'frequency': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
        'issue_location': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä',
        'submission_time': moscow_time,
        'tg_user_id': 'diagnosis_test_user',
        'status': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'
    }
    
    print("üß™ –¢–ï–°–¢–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô:")
    filled_count = 0
    for key, value in test_scenario.items():
        status = "‚úÖ" if value else "‚ùå"
        if value:
            filled_count += 1
        print(f"   {status} {key}: '{value}'")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {filled_count}/{len(test_scenario)}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {filled_count/len(test_scenario)*100:.1f}%")
    
    # 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 30)
    
    if filled_count == len(test_scenario):
        print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üîç –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   1. –ü—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets API")
        print("   2. –ü–æ—Ä—è–¥–∫–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ")
        print("   3. –û–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ g_sheets.py")
    else:
        print("‚ùå –ï—Å—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è")
        print("üîß –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        print("   1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î")
        print("   2. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã")
        print("   3. –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    return filled_count == len(test_scenario)

if __name__ == "__main__":
    diagnose_export_issue()
