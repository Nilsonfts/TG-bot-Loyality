# -*- coding: utf-8 -*-

import logging
from datetime import datetime, timezone, timedelta
import re
import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

import g_sheets
import navigation_handlers
import admin_handlers
import utils
from constants import (
    OWNER_LAST_NAME, OWNER_FIRST_NAME, REASON, CARD_TYPE, CARD_NUMBER, CATEGORY,
    AMOUNT, FREQUENCY, ISSUE_LOCATION, CONFIRMATION
)

logger = logging.getLogger(__name__)

def format_summary(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π."""
    owner = f"{data.get('owner_first_name', '')} {data.get('owner_last_name', '')}".strip()
    card_type = data.get('card_type')
    amount_label = '–°–∫–∏–¥–∫–∞' if card_type == '–°–∫–∏–¥–∫–∞' else '–°—É–º–º–∞'
    amount_unit = '%' if card_type == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'
    return (f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é –∑–∞—è–≤–∫—É:</b>\n\n"
            f"--- <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</b> ---\n"
            f"üë§ –§–ò–û: {data.get('initiator_fio', '-')}\n"
            f"üìß –ü–æ—á—Ç–∞: {data.get('initiator_email', '-')}\n"
            f"--- <b>–ö–∞—Ä—Ç–∞</b> ---\n"
            f"üí≥ –í–ª–∞–¥–µ–ª–µ—Ü: {owner}\n"
            f"üìû –ù–æ–º–µ—Ä: {data.get('card_number', '-')}\n"
            f"‚ú® –¢–∏–ø: {card_type}\n"
            f"üí∞ {amount_label}: {data.get('amount', '0')}{amount_unit}\n"
            f"üìà –°—Ç–∞—Ç—å—è: {data.get('category', '-')}\n"
            f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {data.get('frequency', '-')}\n"
            f"üìç –ì–æ—Ä–æ–¥/–ë–∞—Ä: {data.get('issue_location', '-')}\n\n"
            "<i>–í—Å–µ –≤–µ—Ä–Ω–æ?</i>")

async def start_form_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –£–ñ–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    context.user_data.clear()
    user_id = str(update.effective_user.id)
    
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    initiator_data = g_sheets.get_initiator_data(user_id)
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç get_initiator_data: {initiator_data}")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ Google Sheets, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    if not initiator_data:
        logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Google Sheets –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î")
        try:
            utils.init_local_db()  # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            initiator_data = utils.get_initiator_from_local_db(user_id)
            if initiator_data:
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {initiator_data}")
            else:
                logger.warning(f"‚ùå –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {e}")
    
    if not initiator_data:
        logger.error(f"üö´ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ Google Sheets, –Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n\n"
            "üîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode=ParseMode.HTML
        )
        return await navigation_handlers.end_conversation_and_show_menu(update, context)

    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ context.user_data")
    context.user_data.update(initiator_data)
    
    await update.message.reply_text(
        "üìù <b>–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∞—á—É –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã:",
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é OWNER_LAST_NAME")
    return OWNER_LAST_NAME

async def get_owner_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    last_name = utils.sanitize_input(update.message.text, 50)
    if len(last_name) < 2:
        await update.message.reply_text("‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é.")
        return OWNER_LAST_NAME
    
    context.user_data['owner_last_name'] = last_name
    await update.message.reply_text("<b>–ò–º—è</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.HTML)
    return OWNER_FIRST_NAME

async def get_owner_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    first_name = utils.sanitize_input(update.message.text, 50)
    if len(first_name) < 2:
        await update.message.reply_text("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return OWNER_FIRST_NAME
    
    context.user_data['owner_first_name'] = first_name
    await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏?")
    return REASON

async def get_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['reason'] = update.message.text
    keyboard = [[InlineKeyboardButton("–ë–∞—Ä—Ç–µ—Ä", callback_data="–ë–∞—Ä—Ç–µ—Ä"), InlineKeyboardButton("–°–∫–∏–¥–∫–∞", callback_data="–°–∫–∏–¥–∫–∞")]]
    await update.message.reply_text("–¢–∏–ø –∫–∞—Ä—Ç—ã?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CARD_TYPE

async def get_card_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['card_type'] = query.data
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ 8)?")
    return CARD_NUMBER

async def get_card_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    number = update.message.text.strip()
    
    if not utils.validate_phone_number(number):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8.\n\n–ü—Ä–∏–º–µ—Ä: 89991234567")
        return CARD_NUMBER
    
    context.user_data['card_number'] = number
    keyboard = [[InlineKeyboardButton("–ê–†–¢", callback_data="–ê–†–¢"), InlineKeyboardButton("–ú–ê–†–ö–ï–¢", callback_data="–ú–ê–†–ö–ï–¢")], [InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫", callback_data="–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫")], [InlineKeyboardButton("–°–ö–ò–î–ö–ê", callback_data="–°–ö–ò–î–ö–ê"), InlineKeyboardButton("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")], [InlineKeyboardButton("–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏", callback_data="–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏")]]
    await update.message.reply_text("–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CATEGORY

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['category'] = query.data
    prompt = "–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞?" if context.user_data['card_type'] == "–ë–∞—Ä—Ç–µ—Ä" else "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏?"
    await query.edit_message_text(f"–°—Ç–∞—Ç—å—è: {query.data}.\n\n{prompt}")
    return AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    amount_text = update.message.text.strip()
    card_type = context.user_data.get('card_type', '')
    
    is_valid, error_msg = utils.validate_amount(amount_text, card_type)
    if not is_valid:
        await update.message.reply_text(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return AMOUNT
    
    context.user_data['amount'] = amount_text
    keyboard = [[InlineKeyboardButton("–†–∞–∑–æ–≤–∞—è", callback_data="–†–∞–∑–æ–≤–∞—è")], [InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É", callback_data="–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É")], [InlineKeyboardButton("–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã", callback_data="–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã")]]
    await update.message.reply_text("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return FREQUENCY

async def get_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['frequency'] = query.data
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n<b>–ì–æ—Ä–æ–¥/–ë–∞—Ä –≤—ã–¥–∞—á–∏?</b>", parse_mode=ParseMode.HTML)
    return ISSUE_LOCATION

async def get_issue_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['issue_location'] = update.message.text
    summary = format_summary(context.user_data)
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="submit"), InlineKeyboardButton("‚ùå –ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return CONFIRMATION

async def submit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é write_row."""
    query = update.callback_query
    await query.answer(text="–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞—è–≤–∫—É...", show_alert=False)
    
    user_id = str(query.from_user.id)
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –µ–¥–∏–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ write_row
    data_to_write = context.user_data.copy() # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å
    
    # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (+3 —á–∞—Å–∞ –æ—Ç UTC)
    moscow_tz = timezone(timedelta(hours=3))
    moscow_time = datetime.now(moscow_tz).strftime('%Y-%m-%d %H:%M:%S')
    data_to_write['submission_time'] = moscow_time
    
    data_to_write['tg_user_id'] = user_id
    data_to_write['status'] = '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å '–ó–∞—è–≤–∫–∞' –Ω–∞ –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ username —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if not data_to_write.get('initiator_username'):
        data_to_write['initiator_username'] = f"@{query.from_user.username}" if query.from_user.username else '‚Äì'

    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    logger.info(f"=== –î–ê–ù–ù–´–ï –î–õ–Ø –ó–ê–ü–ò–°–ò –í GOOGLE SHEETS ===")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    for key, value in data_to_write.items():
        logger.info(f"  {key}: '{value}'")
    logger.info(f"==========================================")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
    utils.init_local_db()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
    local_app_id = utils.save_application_to_local_db(data_to_write)
    
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é, "—É–º–Ω—É—é" —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
    google_success = g_sheets.write_row(data_to_write)

    if google_success or local_app_id:
        if google_success:
            status_text = "\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.\n\n" \
                         "üìã <i>–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞!</i>"
        else:
            status_text = "\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.\n\n" \
                         "üìã <i>–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞!</i>"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets
        if google_success:
            boss_id = os.getenv("BOSS_ID")
            if boss_id:
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                    all_records = g_sheets.get_sheet_data()
                    if all_records:
                        # –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ –º–∞—Å—Å–∏–≤–µ
                        row_index = len(all_records) - 1  # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ (–¥–ª—è get_row_data)
                        logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(all_records)}, row_index –¥–ª—è –∞–¥–º–∏–Ω–∞: {row_index}")
                        
                        notification = admin_handlers.format_admin_notification(data_to_write, row_index)
                        
                        await context.bot.send_message(
                            chat_id=boss_id,
                            text=notification["text"],
                            reply_markup=notification["reply_markup"],
                            parse_mode=ParseMode.HTML
                        )
                        logger.info(f"–ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ: {e}")
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.error(f"data_to_write —Å–æ–¥–µ—Ä–∂–∏—Ç: {data_to_write}")
                    import traceback
                    logger.error(f"–¢—Ä–µ–π—Å–±–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    else:
        status_text = "\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await query.edit_message_text(text=query.message.text_html + status_text, parse_mode=ParseMode.HTML, reply_markup=None)
    
    context.user_data.clear()
    await navigation_handlers.main_menu_command(update, context)

    return ConversationHandler.END

async def restart_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞."""
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    return await start_form_conversation(update, context)
