# -*- coding: utf-8 -*-

import logging
import re
import os
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

import g_sheets
import navigation_handlers
import admin_handlers
from constants import (
    SheetCols, REGISTER_CONTACT, REGISTER_FIO, REGISTER_EMAIL, REGISTER_JOB_TITLE,
    OWNER_LAST_NAME, OWNER_FIRST_NAME, REASON, CARD_TYPE, CARD_NUMBER, CATEGORY,
    AMOUNT, FREQUENCY, ISSUE_LOCATION, CONFIRMATION
)

logger = logging.getLogger(__name__)


def format_summary(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π."""
    owner = f"{data.get('owner_first_name', '')} {data.get('owner_last_name', '')}".strip()
    card_type = data.get('card_type')
    amount_label = '–°–∫–∏–¥–∫–∞' if card_type == '–°–∫–∏–¥–∫–∞' else '–°—É–º–º–∞'
    amount_unit = '%' if card_type == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'
    return (f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é –∑–∞—è–≤–∫—É:</b>\n\n"
            f"--- <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</b> ---\n"
            f"üë§ –§–ò–û: {data.get('initiator_fio', '-')}\n"
            f"üìß –ü–æ—á—Ç–∞: {data.get('initiator_email', '-')}\n"
            f"--- <b>–ö–∞—Ä—Ç–∞</b> ---\n"
            f"üí≥ –í–ª–∞–¥–µ–ª–µ—Ü: {owner}\n"
            f"üìû –ù–æ–º–µ—Ä: {data.get('card_number', '-')}\n"
            f"‚ú® –¢–∏–ø: {card_type}\n"
            f"üí∞ {amount_label}: {data.get('amount', '0')}{amount_unit}\n"
            f"üìà –°—Ç–∞—Ç—å—è: {data.get('category', '-')}\n"
            f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {data.get('frequency', '-')}\n"
            f"üìç –ì–æ—Ä–æ–¥/–ë–∞—Ä: {data.get('issue_location', '-')}\n\n"
            "<i>–í—Å–µ –≤–µ—Ä–Ω–æ?</i>")

async def start_form_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏."""
    context.user_data.clear()
    user_id = str(update.effective_user.id)
    is_registered = g_sheets.is_user_registered(user_id)

    if is_registered:
        initiator_data = g_sheets.get_initiator_data(user_id)
        if not initiator_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return await navigation_handlers.end_conversation_and_show_menu(update, context)

        context.user_data.update(initiator_data)
        await update.message.reply_text(
            f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∞—á—É –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.\n–í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.",
            parse_mode=ParseMode.HTML
        )
        return OWNER_LAST_NAME
    else:
        keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ—Ö–æ–∂–µ, –≤—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ.\n"
            "–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return REGISTER_CONTACT


async def handle_contact_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact, user = update.message.contact, update.effective_user
    context.user_data['initiator_phone'] = contact.phone_number.replace('+', '')
    context.user_data['initiator_username'] = f"@{user.username}" if user.username else "‚Äì"
    await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –§–ò–û</b>.", reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
    return REGISTER_FIO

async def get_registration_fio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['initiator_fio'] = update.message.text
    await update.message.reply_text("‚úÖ –§–ò–û –ø—Ä–∏–Ω—è—Ç–æ.\n\nüìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É</b>.", parse_mode=ParseMode.HTML)
    return REGISTER_EMAIL

async def get_registration_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = update.message.text
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return REGISTER_EMAIL
    context.user_data['initiator_email'] = email
    await update.message.reply_text("‚úÖ –ü–æ—á—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\nüè¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–¥–æ–ª–∂–Ω–æ—Å—Ç—å</b>.", parse_mode=ParseMode.HTML)
    return REGISTER_JOB_TITLE

async def get_registration_job_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['initiator_job_title'] = update.message.text
    await update.message.reply_text(
        "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å –∑–∞—è–≤–∫–æ–π.\n–í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.",
        parse_mode=ParseMode.HTML
    )
    return OWNER_LAST_NAME

async def get_owner_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['owner_last_name'] = update.message.text
    await update.message.reply_text("<b>–ò–º—è</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.HTML)
    return OWNER_FIRST_NAME

async def get_owner_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['owner_first_name'] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏?")
    return REASON

async def get_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['reason'] = update.message.text
    keyboard = [[InlineKeyboardButton("–ë–∞—Ä—Ç–µ—Ä", callback_data="–ë–∞—Ä—Ç–µ—Ä"), InlineKeyboardButton("–°–∫–∏–¥–∫–∞", callback_data="–°–∫–∏–¥–∫–∞")]]
    await update.message.reply_text("–¢–∏–ø –∫–∞—Ä—Ç—ã?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CARD_TYPE

async def get_card_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['card_type'] = query.data
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ 8)?")
    return CARD_NUMBER

async def get_card_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    number = update.message.text
    if not (number.startswith('8') and number.isdigit() and len(number) == 11):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8.")
        return CARD_NUMBER
    
    existing_card = g_sheets.find_card_by_number(number)
    if existing_card:
        row_data = g_sheets.get_row_data(existing_card.row)
        owner_name = f"{row_data.get(SheetCols.OWNER_FIRST_NAME_COL)} {row_data.get(SheetCols.OWNER_LAST_NAME_COL)}"
        await update.message.reply_text(f"‚ùå –≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ <b>{owner_name}</b>. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.", parse_mode=ParseMode.HTML)
        return CARD_NUMBER
        
    context.user_data['card_number'] = number
    keyboard = [[InlineKeyboardButton("–ê–†–¢", callback_data="–ê–†–¢"), InlineKeyboardButton("–ú–ê–†–ö–ï–¢", callback_data="–ú–ê–†–ö–ï–¢")], [InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫", callback_data="–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫")], [InlineKeyboardButton("–°–ö–ò–î–ö–ê", callback_data="–°–ö–ò–î–ö–ê"), InlineKeyboardButton("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")], [InlineKeyboardButton("–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏", callback_data="–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏")]]
    await update.message.reply_text("–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CATEGORY

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['category'] = query.data
    prompt = "–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞?" if context.user_data['card_type'] == "–ë–∞—Ä—Ç–µ—Ä" else "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏?"
    await query.edit_message_text(f"–°—Ç–∞—Ç—å—è: {query.data}.\n\n{prompt}")
    return AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message.text.isdigit():
        await update.message.reply_text("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return AMOUNT
    context.user_data['amount'] = update.message.text
    keyboard = [[InlineKeyboardButton("–†–∞–∑–æ–≤–∞—è", callback_data="–†–∞–∑–æ–≤–∞—è")], [InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É", callback_data="–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É")], [InlineKeyboardButton("–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã", callback_data="–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã")]]
    await update.message.reply_text("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return FREQUENCY

async def get_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['frequency'] = query.data
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    locations = g_sheets.get_config_options("ValidLocations")
    if not locations:
        await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n<b>–ì–æ—Ä–æ–¥/–ë–∞—Ä –≤—ã–¥–∞—á–∏?</b>\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)", parse_mode=ParseMode.HTML)
        return ISSUE_LOCATION
        
    keyboard = [
        [InlineKeyboardButton(loc, callback_data=loc)] for loc in locations
    ]
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥/–±–∞—Ä –≤—ã–¥–∞—á–∏:</b>", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return ISSUE_LOCATION


async def get_issue_location_from_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    context.user_data['issue_location'] = query.data
    summary = format_summary(context.user_data)
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="submit"), InlineKeyboardButton("‚ùå –ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    await query.edit_message_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return CONFIRMATION

async def get_issue_location_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)."""
    context.user_data['issue_location'] = update.message.text
    summary = format_summary(context.user_data)
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="submit"), InlineKeyboardButton("‚ùå –ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return CONFIRMATION

async def submit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞."""
    query = update.callback_query
    await query.answer(text="–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ...", show_alert=False)
    
    user_id = str(query.from_user.id)
    context.user_data['status'] = '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'
    
    row_index = g_sheets.write_to_sheet(
        data=context.user_data,
        submission_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        tg_user_id=user_id
    )

    if row_index:
        await query.edit_message_text(
            text=query.message.text_html + "\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.",
            parse_mode=ParseMode.HTML, reply_markup=None
        )
        
        boss_id = os.getenv("BOSS_ID")
        if boss_id:
            row_data = g_sheets.get_row_data(row_index)
            if row_data:
                notification = admin_handlers.format_admin_notification(row_data, row_index)
                await context.bot.send_message(chat_id=boss_id, **notification)
    else:
        await query.edit_message_text(
             text=query.message.text_html + "\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É.",
             parse_mode=ParseMode.HTML, reply_markup=None
        )

    context.user_data.clear()
    await navigation_handlers.main_menu_command(update, context)
    return ConversationHandler.END

async def restart_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏."""
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    return await start_form_conversation(update, context)
