# -*- coding: utf-8 -*-

"""
This file contains all the handlers for commands, messages, and callbacks.
"""

import logging
import re
import io
import csv
from datetime import datetime
from collections import Counter

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup,
    KeyboardButton, ReplyKeyboardRemove, InputFile
)
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

import g_sheets
import keyboards
from constants import (
    MENU_TEXT_SUBMIT, MENU_TEXT_SEARCH, MENU_TEXT_SETTINGS, MENU_TEXT_MAIN_MENU,
    CARDS_PER_PAGE, REGISTER_CONTACT, REGISTER_FIO, REGISTER_EMAIL,
    REGISTER_JOB_TITLE, OWNER_LAST_NAME, OWNER_FIRST_NAME, REASON, CARD_TYPE,
    CARD_NUMBER, CATEGORY, AMOUNT, FREQUENCY, ISSUE_LOCATION, CONFIRMATION,
    SEARCH_CHOOSE_FIELD, AWAIT_SEARCH_QUERY
)

logger = logging.getLogger(__name__)

# --- UTILITY HANDLERS ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels any active conversation and shows the main menu."""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await start_command(update, context)
    return ConversationHandler.END


# --- NAVIGATION HANDLERS ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Entry point. Checks registration and shows the correct main menu."""
    is_registered = g_sheets.is_user_registered(str(update.effective_user.id))
    keyboard = keyboards.get_main_menu_keyboard(is_registered)
    if is_registered:
        await update.message.reply_text("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=keyboard)
    else:
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", reply_markup=keyboard)

async def main_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Alias for /start to show the main menu."""
    await start_command(update, context)

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Displays the settings menu."""
    is_boss = (str(update.effective_user.id) == g_sheets.os.getenv("BOSS_ID"))
    keyboard = keyboards.get_settings_keyboard(is_boss)
    await update.message.reply_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=keyboard)


# --- REGISTRATION CONVERSATION HANDLERS ---
async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the registration flow."""
    context.user_data.clear()
    keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
    await update.message.reply_text(
        "–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return REGISTER_CONTACT

async def handle_contact_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handles receiving the user's contact."""
    contact, user = update.message.contact, update.effective_user
    if contact.user_id != user.id:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", reply_markup=ReplyKeyboardRemove())
        return await cancel(update, context)

    context.user_data['initiator_phone'] = contact.phone_number.replace('+', '')
    context.user_data['initiator_username'] = f"@{user.username}" if user.username else "‚Äì"
    await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –§–ò–û</b>.", reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
    return REGISTER_FIO

async def get_registration_fio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['initiator_fio'] = update.message.text
    await update.message.reply_text("‚úÖ –§–ò–û –ø—Ä–∏–Ω—è—Ç–æ.\n\nüìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É</b>.", parse_mode=ParseMode.HTML)
    return REGISTER_EMAIL

async def get_registration_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = update.message.text
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return REGISTER_EMAIL
    context.user_data['initiator_email'] = email
    await update.message.reply_text("‚úÖ –ü–æ—á—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\nüè¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–¥–æ–ª–∂–Ω–æ—Å—Ç—å</b>.", parse_mode=ParseMode.HTML)
    return REGISTER_JOB_TITLE

async def finish_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Finishes registration, saves data, and shows the main menu."""
    context.user_data['initiator_job_title'] = update.message.text
    success = g_sheets.write_to_sheet(
        data=context.user_data,
        submission_time=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        tg_user_id=str(update.effective_user.id)
    )
    if success:
        await update.message.reply_text("üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>", parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    context.user_data.clear()
    await main_menu_command(update, context)
    return ConversationHandler.END


# --- SETTINGS & FEATURES CALLBACK HANDLERS ---
async def back_to_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    is_boss = (str(query.from_user.id) == g_sheets.os.getenv("BOSS_ID"))
    keyboard = keyboards.get_settings_keyboard(is_boss)
    await query.edit_message_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=keyboard)

async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    help_text = (
        "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        f"‚ñ´Ô∏è <b>{MENU_TEXT_SUBMIT}</b> - –∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã.\n"
        f"‚ñ´Ô∏è <b>{MENU_TEXT_SETTINGS}</b> - –¥–æ—Å—Ç—É–ø –∫ –∑–∞—è–≤–∫–∞–º, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç—É.\n"
        f"‚ñ´Ô∏è <b>{MENU_TEXT_SEARCH}</b> - –ø–æ–∏—Å–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞—è–≤–∫–∞–º.\n"
        f"‚ñ´Ô∏è <b>{MENU_TEXT_MAIN_MENU}</b> - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
    )
    await query.edit_message_text(help_text, reply_markup=keyboards.get_back_to_settings_keyboard(), parse_mode=ParseMode.HTML)

async def stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    is_boss = (user_id == g_sheets.os.getenv("BOSS_ID"))
    await query.edit_message_text("üìä –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    cards_data = g_sheets.get_cards_from_sheet(user_id=None if is_boss else user_id)
    
    if not cards_data:
        await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=keyboards.get_back_to_settings_keyboard())
        return

    total_cards = len(cards_data)
    barter_count = sum(1 for c in cards_data if c.get('–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?') == '–ë–∞—Ä—Ç–µ—Ä')
    category_counter = Counter(c.get('–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç') for c in cards_data if c.get('–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç'))
    most_common_category = category_counter.most_common(1)[0][0] if category_counter else "‚Äì"
    
    text = (f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üóÇÔ∏è {'–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ' if is_boss else '–ü–æ–¥–∞–Ω–æ –≤–∞–º–∏ –∑–∞—è–≤–æ–∫'}: <b>{total_cards}</b>\n"
            f"    - –ö–∞—Ä—Ç '–ë–∞—Ä—Ç–µ—Ä': <code>{barter_count}</code>\n"
            f"    - –ö–∞—Ä—Ç '–°–∫–∏–¥–∫–∞': <code>{total_cards - barter_count}</code>\n\n"
            f"üìà –°–∞–º–∞—è —á–∞—Å—Ç–∞—è —Å—Ç–∞—Ç—å—è: <b>{most_common_category}</b>")
    await query.edit_message_text(text, reply_markup=keyboards.get_back_to_settings_keyboard(), parse_mode=ParseMode.HTML)

async def export_csv_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    is_boss = (user_id == g_sheets.os.getenv("BOSS_ID"))
    await query.edit_message_text("üìÑ –§–æ—Ä–º–∏—Ä—É—é CSV —Ñ–∞–π–ª...")
    cards_to_export = g_sheets.get_cards_from_sheet(user_id=None if is_boss else user_id)

    if not cards_to_export:
        await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=keyboards.get_back_to_settings_keyboard())
        return

    output = io.StringIO()
    writer = csv.DictWriter(output, fieldnames=cards_to_export[0].keys())
    writer.writeheader()
    writer.writerows(cards_to_export)
    output.seek(0)
    
    file_to_send = InputFile(output.getvalue().encode('utf-8-sig'), filename=f"export_{datetime.now().strftime('%Y-%m-%d')}.csv")
    await context.bot.send_document(chat_id=query.message.chat_id, document=file_to_send)
    await query.message.delete()

# --- PAGINATION & SEARCH HANDLERS ---

async def display_paginated_list(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int, data_key: str, list_title: str):
    """Generic function to display a paginated list of items."""
    message_to_edit = update.callback_query.message
    all_items = context.user_data.get(data_key, [])
    
    if not all_items:
        await message_to_edit.edit_text("ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=keyboards.get_back_to_settings_keyboard())
        return

    start_index = page * CARDS_PER_PAGE
    end_index = start_index + CARDS_PER_PAGE
    items_on_page = all_items[start_index:end_index]
    total_pages = (len(all_items) + CARDS_PER_PAGE - 1) // CARDS_PER_PAGE

    text = f"<b>{list_title} (–°—Ç—Ä. {page + 1}/{total_pages}):</b>\n\n"
    for card in items_on_page:
        owner_name = f"{card.get('–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã','')} {card.get('–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞','-')}".strip()
        amount_text = ""
        if card.get('–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞ –∏–ª–∏ % —Å–∫–∏–¥–∫–∏'):
            card_type_str = card.get('–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?')
            amount_text = f"üí∞ {'–°–∫–∏–¥–∫–∞' if card_type_str == '–°–∫–∏–¥–∫–∞' else '–ë–∞—Ä—Ç–µ—Ä'}: {card.get('–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞ –∏–ª–∏ % —Å–∫–∏–¥–∫–∏')}{'%' if card_type_str == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'}\n"
        
        text += (f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_name}\nüìû –ù–æ–º–µ—Ä: {card.get('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', '-')}\n{amount_text}"
                 f"<b>–°—Ç–∞—Ç—É—Å:</b> <code>{card.get('–°—Ç–∞—Ç—É—Å –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è', '‚Äì')}</code>\nüìÖ {card.get('–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏', '-')}\n")
        
        if str(update.effective_user.id) == g_sheets.os.getenv("BOSS_ID"):
            text += f"ü§µ‚Äç‚ôÇÔ∏è <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {card.get('–§–ò–û –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', '-')} ({card.get('–¢–µ–≥ Telegram', '-')})\n"
        text += "--------------------\n"

    row = []
    if page > 0: row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"paginate_{data_key}_{page - 1}"))
    row.append(InlineKeyboardButton(f" {page + 1}/{total_pages} ", callback_data="noop"))
    if end_index < len(all_items): row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"paginate_{data_key}_{page + 1}"))
    
    await message_to_edit.edit_text(text, reply_markup=InlineKeyboardMarkup([row, [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]]), parse_mode=ParseMode.HTML)

async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, data_key, page_str = query.data.split('_')
    is_boss = (str(update.effective_user.id) == g_sheets.os.getenv("BOSS_ID"))
    list_title = "–í—Å–µ –∑–∞—è–≤–∫–∏" if is_boss else "–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
    await display_paginated_list(update, context, page=int(page_str), data_key=data_key, list_title=list_title)

async def noop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()

async def my_cards_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    is_boss = (user_id == g_sheets.os.getenv("BOSS_ID"))
    await query.edit_message_text("üëë –ó–∞–≥—Ä—É–∂–∞—é –í–°–ï –∑–∞—è–≤–∫–∏..." if is_boss else "üîç –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞—è–≤–∫–∏...")
    
    all_cards = g_sheets.get_cards_from_sheet(user_id=None if is_boss else user_id)
    if not all_cards:
        await query.edit_message_text("ü§∑ –ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=keyboards.get_back_to_settings_keyboard())
        return

    context.user_data['my_cards'] = all_cards
    list_title = "–í—Å–µ –∑–∞—è–≤–∫–∏" if is_boss else "–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
    await display_paginated_list(update, context, page=0, data_key='my_cards', list_title=list_title)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("–ü–æ –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞", callback_data="search_by_name")],
        [InlineKeyboardButton("–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã", callback_data="search_by_phone")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SEARCH_CHOOSE_FIELD

async def search_field_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['search_field'] = query.data
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    return AWAIT_SEARCH_QUERY

async def perform_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    is_boss = (user_id == g_sheets.os.getenv("BOSS_ID"))
    search_query = update.message.text.lower().strip()
    loading_msg = await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")

    all_cards = g_sheets.get_cards_from_sheet(user_id=None if is_boss else user_id)
    search_field = context.user_data.get('search_field')
    
    if search_field == 'search_by_name':
        results = [c for c in all_cards if search_query in c.get('–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã', '').lower() or search_query in c.get('–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞', '').lower()]
    else: # search_by_phone
        results = [c for c in all_cards if search_query in str(c.get('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', ''))]
    
    context.user_data['search_results'] = results
    await loading_msg.delete()
    
    # Mock an update to reuse the display function
    class MockUpdate:
        def __init__(self, msg, user):
            self.callback_query = type('MockCQ', (), {'message': msg})()
            self.effective_user = user
            
    await display_paginated_list(MockUpdate(update.message, update.effective_user), context, page=0, data_key='search_results', list_title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    return ConversationHandler.END


# --- APPLICATION FORM CONVERSATION HANDLERS ---
async def start_form_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Starts the application form for a registered user."""
    context.user_data.clear()
    initiator_data = g_sheets.find_initiator_in_sheet(str(update.effective_user.id))
    if not initiator_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return await cancel(update, context)

    context.user_data.update(initiator_data)
    await update.message.reply_text(
        f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∞—á—É –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.\n–í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.",
        parse_mode=ParseMode.HTML, reply_markup=ReplyKeyboardRemove()
    )
    return OWNER_LAST_NAME

async def get_owner_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['owner_last_name'] = update.message.text
    await update.message.reply_text("<b>–ò–º—è</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.HTML)
    return OWNER_FIRST_NAME

async def get_owner_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['owner_first_name'] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏?")
    return REASON

async def get_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['reason'] = update.message.text
    keyboard = [[InlineKeyboardButton("–ë–∞—Ä—Ç–µ—Ä", callback_data="–ë–∞—Ä—Ç–µ—Ä"), InlineKeyboardButton("–°–∫–∏–¥–∫–∞", callback_data="–°–∫–∏–¥–∫–∞")]]
    await update.message.reply_text("–¢–∏–ø –∫–∞—Ä—Ç—ã?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CARD_TYPE

async def get_card_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['card_type'] = query.data
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ 8)?")
    return CARD_NUMBER

async def get_card_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    number = update.message.text
    if not (number.startswith('8') and number.isdigit() and len(number) == 11):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8.")
        return CARD_NUMBER
    context.user_data['card_number'] = number
    keyboard = [[InlineKeyboardButton("–ê–†–¢", callback_data="–ê–†–¢"), InlineKeyboardButton("–ú–ê–†–ö–ï–¢", callback_data="–ú–ê–†–ö–ï–¢")], [InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫", callback_data="–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫")], [InlineKeyboardButton("–°–ö–ò–î–ö–ê", callback_data="–°–ö–ò–î–ö–ê"), InlineKeyboardButton("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")], [InlineKeyboardButton("–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏", callback_data="–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏")]]
    await update.message.reply_text("–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CATEGORY

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['category'] = query.data
    prompt = "–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞?" if context.user_data['card_type'] == "–ë–∞—Ä—Ç–µ—Ä" else "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏?"
    await query.edit_message_text(f"–°—Ç–∞—Ç—å—è: {query.data}.\n\n{prompt}")
    return AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message.text.isdigit():
        await update.message.reply_text("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return AMOUNT
    context.user_data['amount'] = update.message.text
    keyboard = [[InlineKeyboardButton("–†–∞–∑–æ–≤–∞—è", callback_data="–†–∞–∑–æ–≤–∞—è")], [InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É", callback_data="–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É")], [InlineKeyboardButton("–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã", callback_data="–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã")]]
    await update.message.reply_text("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return FREQUENCY

async def get_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['frequency'] = query.data
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n<b>–ì–æ—Ä–æ–¥_–ë–ê–† –≤—ã–¥–∞—á–∏?</b>", parse_mode=ParseMode.HTML)
    return ISSUE_LOCATION

def format_summary(data: dict) -> str:
    """Formats the final summary of the application."""
    owner = f"{data.get('owner_first_name', '')} {data.get('owner_last_name', '')}".strip()
    card_type = data.get('card_type')
    amount_label = '–°–∫–∏–¥–∫–∞' if card_type == '–°–∫–∏–¥–∫–∞' else '–°—É–º–º–∞'
    amount_unit = '%' if card_type == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'
    return (f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é –∑–∞—è–≤–∫—É:</b>\n\n"
            f"--- <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</b> ---\n"
            f"üë§ –§–ò–û: {data.get('initiator_fio', '-')}\n"
            f"--- <b>–ö–∞—Ä—Ç–∞</b> ---\n"
            f"üí≥ –í–ª–∞–¥–µ–ª–µ—Ü: {owner}\n"
            f"üìû –ù–æ–º–µ—Ä: {data.get('card_number', '-')}\n"
            f"‚ú® –¢–∏–ø: {card_type}\n"
            f"üí∞ {amount_label}: {data.get('amount', '0')}{amount_unit}\n"
            f"üìà –°—Ç–∞—Ç—å—è: {data.get('category', '-')}\n"
            f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {data.get('frequency', '-')}\n"
            f"üìç –ì–æ—Ä–æ–¥/–ë–∞—Ä: {data.get('issue_location', '-')}\n\n"
            "<i>–í—Å–µ –≤–µ—Ä–Ω–æ?</i>")

async def get_issue_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['issue_location'] = update.message.text
    summary = format_summary(context.user_data)
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="submit"), InlineKeyboardButton("‚ùå –ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return CONFIRMATION

async def submit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Final submission handler for an application."""
    query = update.callback_query
    await query.answer(text="–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞—è–≤–∫—É...", show_alert=False)
    success = g_sheets.write_to_sheet(context.user_data, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), str(query.from_user.id))
    status_text = "\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞." if success else "\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É."
    await query.edit_message_text(text=query.message.text_html + status_text, parse_mode=ParseMode.HTML, reply_markup=None)
    context.user_data.clear()
    await main_menu_command(query, context)
    return ConversationHandler.END

async def restart_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Restarts the application form from the beginning."""
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    return await start_form_conversation(query, context)
