#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import g_sheets
from constants import SheetCols

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def diagnose_sheets_export():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –≤ Google Sheets."""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–´–ì–†–£–ó–ö–ò –í GOOGLE SHEETS")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ Google Sheets
    try:
        client = g_sheets.get_gspread_client()
        if not client:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
            return False
            
        sheet = g_sheets.get_sheet_by_gid(client)
        if not sheet:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")
            return False
            
        actual_headers = sheet.row_values(1)
        print(f"\nüìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ Google Sheets ({len(actual_headers)} —Å—Ç–æ–ª–±—Ü–æ–≤):")
        for i, header in enumerate(actual_headers, 1):
            print(f"   {i:2d}. {header}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–¥–∞
    constants_dict = {}
    for attr_name in dir(SheetCols):
        if not attr_name.startswith('_'):
            constants_dict[attr_name] = getattr(SheetCols, attr_name)
    
    print(f"\nüîß –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –∫–æ–¥–µ ({len(constants_dict)} —à—Ç—É–∫):")
    for i, (const_name, const_value) in enumerate(constants_dict.items(), 1):
        print(f"   {i:2d}. {const_name} = '{const_value}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:")
    print("-" * 40)
    
    missing_in_sheets = []
    missing_in_constants = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
    for const_name, const_value in constants_dict.items():
        if const_value not in actual_headers:
            missing_in_sheets.append(f"{const_name} = '{const_value}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö
    for header in actual_headers:
        if header not in constants_dict.values():
            missing_in_constants.append(header)
    
    if missing_in_sheets:
        print(f"\n‚ùå –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ —Ç–∞–±–ª–∏—Ü–µ ({len(missing_in_sheets)}):")
        for missing in missing_in_sheets:
            print(f"   ‚Ä¢ {missing}")
    
    if missing_in_constants:
        print(f"\n‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö ({len(missing_in_constants)}):")
        for missing in missing_in_constants:
            print(f"   ‚Ä¢ '{missing}'")
    
    if not missing_in_sheets and not missing_in_constants:
        print("‚úÖ –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º!")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–ò–°–ò:")
    print("-" * 30)
    
    test_data = {
        'submission_time': '2025-07-16 15:30:00',
        'tg_user_id': '123456789',
        'initiator_username': '@testuser',
        'initiator_email': 'test@example.com',
        'initiator_fio': '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'initiator_job_title': '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫',
        'initiator_phone': '+7 999 123-45-67',
        'owner_first_name': '–í–ª–∞–¥–∏–º–∏—Ä',
        'owner_last_name': '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á',
        'reason': '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞',
        'card_type': '–ë–∞—Ä—Ç–µ—Ä',
        'card_number': '1234567890',
        'category': '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        'amount': '1000',
        'frequency': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
        'issue_location': '–¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ä',
        'status': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏'
    }
    
    print("üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for key, value in test_data.items():
        print(f"   {key}: {value}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å—Ç—Ä–æ–∫–∞
    row_mapping = {}
    for header in actual_headers:
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
        const_found = None
        for const_name, const_value in constants_dict.items():
            if const_value == header:
                const_found = const_name
                break
        
        if const_found:
            # –ò—â–µ–º –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
            field_mapping = {
                'TIMESTAMP': 'submission_time',
                'TG_ID': 'tg_user_id',
                'TG_TAG': 'initiator_username',
                'EMAIL': 'initiator_email',
                'FIO_INITIATOR': 'initiator_fio',
                'JOB_TITLE': 'initiator_job_title',
                'PHONE_INITIATOR': 'initiator_phone',
                'OWNER_FIRST_NAME_COL': 'owner_first_name',
                'OWNER_LAST_NAME_COL': 'owner_last_name',
                'REASON_COL': 'reason',
                'CARD_TYPE_COL': 'card_type',
                'CARD_NUMBER_COL': 'card_number',
                'CATEGORY_COL': 'category',
                'AMOUNT_COL': 'amount',
                'FREQUENCY_COL': 'frequency',
                'ISSUE_LOCATION_COL': 'issue_location',
                'STATUS_COL': 'status',
                'APPROVAL_STATUS': '',
                'START_DATE': '',
                'ACTIVATED': '',
                'REASON_REJECT': ''
            }
            
            data_field = field_mapping.get(const_found, '')
            value = test_data.get(data_field, '') if data_field else ''
            row_mapping[header] = value
        else:
            row_mapping[header] = ''
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–†–û–ö–ê –î–õ–Ø –ó–ê–ü–ò–°–ò:")
    for i, (header, value) in enumerate(row_mapping.items(), 1):
        status = "‚úÖ" if value else "‚ùå"
        print(f"   {i:2d}. {status} {header}: '{value}'")
    
    empty_fields = [header for header, value in row_mapping.items() if not value]
    if empty_fields:
        print(f"\n‚ö†Ô∏è  –ü–£–°–¢–´–ï –ü–û–õ–Ø ({len(empty_fields)}):")
        for field in empty_fields:
            print(f"   ‚Ä¢ {field}")
    
    return len(empty_fields) == 0

if __name__ == "__main__":
    diagnose_sheets_export()
