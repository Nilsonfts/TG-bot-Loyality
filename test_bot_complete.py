#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç Telegram-–±–æ—Ç–∞ "–õ–æ—è–ª—å–Ω–æ—Å—Ç—å"
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ Telegram API
"""

import sys
import os
import json
import logging
from datetime import datetime
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class BotTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    
    def __init__(self):
        self.test_results = []
        self.passed_tests = 0
        self.failed_tests = 0
        
    def run_test(self, test_name, test_func):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            test_func()
            print(f"‚úÖ –ü–†–û–ô–î–ï–ù: {test_name}")
            self.test_results.append(f"‚úÖ {test_name}")
            self.passed_tests += 1
        except Exception as e:
            print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù: {test_name} - {str(e)}")
            self.test_results.append(f"‚ùå {test_name} - {str(e)}")
            self.failed_tests += 1
    
    def test_imports(self):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
        import constants
        import g_sheets
        import utils
        import admin_handlers
        import form_handlers
        import registration_handlers
        import keyboards
        import navigation_handlers
        import search_handlers
        import settings_handlers
        import reports
        assert hasattr(constants, 'SheetCols'), "SheetCols –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ constants"
        assert hasattr(g_sheets, 'write_row'), "write_row –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ g_sheets"
        assert hasattr(utils, 'validate_email'), "validate_email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ utils"
    
    def test_constants(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç"""
        from constants import SheetCols
        required_cols = [
            'TIMESTAMP', 'TG_ID', 'EMAIL', 'FIO_INITIATOR', 
            'OWNER_LAST_NAME_COL', 'CARD_TYPE_COL', 'STATUS_COL'
        ]
        for col in required_cols:
            assert hasattr(SheetCols, col), f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {col} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    def test_validation_functions(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        import utils
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        assert utils.validate_phone_number("89991234567") == True
        assert utils.validate_phone_number("79991234567") == False
        assert utils.validate_phone_number("8999123456") == False
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
        assert utils.validate_email("test@company.com") == True
        assert utils.validate_email("invalid-email") == False
        assert utils.validate_email("test@") == False
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –§–ò–û
        assert utils.validate_fio("–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á") == True
        assert utils.validate_fio("–ò") == False
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—É–º–º—ã
        is_valid, _ = utils.validate_amount("50", "–°–∫–∏–¥–∫–∞")
        assert is_valid == True
        
        is_valid, _ = utils.validate_amount("150", "–°–∫–∏–¥–∫–∞")
        assert is_valid == False
        
        is_valid, _ = utils.validate_amount("5000", "–ë–∞—Ä—Ç–µ—Ä")
        assert is_valid == True
    
    def test_admin_notification_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞"""
        import admin_handlers
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ context.user_data
        test_data = {
            'initiator_fio': '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á',
            'initiator_username': '@testuser',
            'owner_first_name': '–ò–≤–∞–Ω',
            'owner_last_name': '–ò–≤–∞–Ω–æ–≤',
            'card_number': '89991234567',
            'card_type': '–ë–∞—Ä—Ç–µ—Ä',
            'amount': '5000',
            'category': '–ê–†–¢',
            'issue_location': '–ú–æ—Å–∫–≤–∞'
        }
        
        result = admin_handlers.format_admin_notification(test_data, 1)
        
        assert 'text' in result, "–ù–µ—Ç –∫–ª—é—á–∞ 'text' –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
        assert 'reply_markup' in result, "–ù–µ—Ç –∫–ª—é—á–∞ 'reply_markup' –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"
        assert '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á' in result['text'], "–§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ"
        assert '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤' in result['text'], "–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        assert '5000 ‚ÇΩ' in result['text'], "–°—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert '–ê–†–¢' in result['text'], "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    def test_sanitization(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        import utils
        
        # –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        dirty_input = "–¢–µ—Å—Ç<script>alert('hack')</script>"
        clean_output = utils.sanitize_input(dirty_input)
        assert '<script>' not in clean_output, "–û–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ —É–¥–∞–ª–µ–Ω—ã"
        
        # –¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã
        long_input = "a" * 300
        limited_output = utils.sanitize_input(long_input, 100)
        assert len(limited_output) <= 100, "–î–ª–∏–Ω–∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞"
    
    def test_database_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        import utils
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        result = utils.init_local_db()
        assert result == True, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ë–î —Å–æ–∑–¥–∞–ª—Å—è
        db_path = os.path.join(os.getcwd(), 'bot_data.db')
        assert os.path.exists(db_path), "–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è"
    
    def test_user_data_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        import utils
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        utils.init_local_db()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = {
            'tg_user_id': 'test_123',
            'initiator_fio': '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç',
            'initiator_email': 'test@test.com',
            'initiator_job_title': '–¢–µ—Å—Ç–µ—Ä',
            'initiator_phone': '89991234567',
            'initiator_username': '@tester'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = utils.save_user_to_local_db(test_user)
        assert result == True, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        saved_user = utils.get_user_from_local_db('test_123')
        assert saved_user is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        assert saved_user['fio'] == '–¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç', "–§–ò–û –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    
    def test_application_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏"""
        import utils
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        utils.init_local_db()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        test_app = {
            'tg_user_id': 'test_123',
            'owner_last_name': '–ò–≤–∞–Ω–æ–≤',
            'owner_first_name': '–ò–≤–∞–Ω',
            'card_number': '89991234567',
            'card_type': '–ë–∞—Ä—Ç–µ—Ä',
            'amount': '5000',
            'category': '–ê–†–¢',
            'issue_location': '–ú–æ—Å–∫–≤–∞',
            'status': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
        app_id = utils.save_application_to_local_db(test_app)
        assert app_id is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"
        assert isinstance(app_id, int), "ID –∑–∞—è–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        search_results = utils.search_applications_local('–ò–≤–∞–Ω', 'name')
        assert len(search_results) > 0, "–ü–æ–∏—Å–∫ –Ω–µ –Ω–∞—à–µ–ª –∑–∞—è–≤–∫—É"
        assert search_results[0]['owner_first_name'] == '–ò–≤–∞–Ω', "–ù–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"
    
    def test_keyboard_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        import keyboards
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard_registered = keyboards.get_main_menu_keyboard(True)
        assert keyboard_registered is not None, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å"
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard_unregistered = keyboards.get_main_menu_keyboard(False)
        assert keyboard_unregistered is not None, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å"
        
        # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_keyboard = keyboards.get_settings_keyboard(True)
        assert settings_keyboard is not None, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å"
    
    def test_statistics_function(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        import utils
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        utils.init_local_db()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
        test_apps = [
            {
                'tg_user_id': 'test_1', 'card_type': '–ë–∞—Ä—Ç–µ—Ä', 'status': '–û–¥–æ–±—Ä–µ–Ω–æ',
                'owner_first_name': '–¢–µ—Å—Ç1', 'owner_last_name': '–¢–µ—Å—Ç–æ–≤1',
                'card_number': '89991111111', 'amount': '1000', 'category': '–ê–†–¢',
                'issue_location': '–ú–æ—Å–∫–≤–∞'
            },
            {
                'tg_user_id': 'test_2', 'card_type': '–°–∫–∏–¥–∫–∞', 'status': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
                'owner_first_name': '–¢–µ—Å—Ç2', 'owner_last_name': '–¢–µ—Å—Ç–æ–≤2',
                'card_number': '89992222222', 'amount': '15', 'category': '–ú–ê–†–ö–ï–¢',
                'issue_location': '–°–ü–±'
            }
        ]
        
        for app in test_apps:
            utils.save_application_to_local_db(app)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = utils.get_statistics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        assert 'total' in stats, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        assert 'by_status' in stats, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"
        assert 'by_card_type' in stats, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–∞—Ä—Ç"
    
    def test_data_integrity(self):
        """–¢–µ—Å—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        from constants import SheetCols
        import g_sheets
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å—Ç–æ–ª–±—Ü–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        required_columns = [
            SheetCols.TIMESTAMP, SheetCols.TG_ID, SheetCols.EMAIL,
            SheetCols.FIO_INITIATOR, SheetCols.OWNER_LAST_NAME_COL,
            SheetCols.CARD_TYPE_COL, SheetCols.STATUS_COL
        ]
        
        for col in required_columns:
            assert col is not None, f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å—Ç–æ–ª–±—Ü–∞ {col} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
            assert isinstance(col, str), f"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å—Ç–æ–ª–±—Ü–∞ {col} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("ü§ñ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM-–ë–û–¢–ê")
        print("=" * 60)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", self.test_imports),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç", self.test_constants),
            ("–§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", self.test_validation_functions),
            ("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞", self.test_admin_notification_formatting),
            ("–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", self.test_sanitization),
            ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î", self.test_database_initialization),
            ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", self.test_user_data_operations),
            ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞—è–≤–∫–∞–º–∏", self.test_application_operations),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä", self.test_keyboard_generation),
            ("–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", self.test_statistics_function),
            ("–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", self.test_data_integrity),
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        for test_name, test_func in tests:
            self.run_test(test_name, test_func)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        for result in self.test_results:
            print(result)
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {self.failed_tests}")
        print(f"üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.passed_tests / (self.passed_tests + self.failed_tests) * 100):.1f}%")
        
        if self.failed_tests == 0:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
            return True
        else:
            print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´. –ù–ï–û–ë–•–û–î–ò–ú–û –ò–°–ü–†–ê–í–ò–¢–¨ {self.failed_tests} –û–®–ò–ë–û–ö.")
            return False

def cleanup_test_database():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    db_path = os.path.join(os.getcwd(), 'bot_data.db')
    if os.path.exists(db_path):
        os.remove(db_path)
        print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['GOOGLE_CREDS_JSON'] = json.dumps({
        "type": "service_account",
        "project_id": "test_project"
    })
    os.environ['GOOGLE_SHEET_KEY'] = "test_sheet_key"
    os.environ['SHEET_GID'] = "0"
    os.environ['BOSS_ID'] = "123456789"
    
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleanup_test_database()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        tester = BotTester()
        success = tester.run_all_tests()
        
        # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
        cleanup_test_database()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        sys.exit(0 if success else 1)
        
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
        import traceback
        traceback.print_exc()
        cleanup_test_database()
        sys.exit(1)
