# -*- coding: utf-8 -*-

import logging
import io
import csv
from datetime import datetime
from collections import Counter

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

import g_sheets
import keyboards
from constants import (
    MENU_TEXT_SUBMIT, MENU_TEXT_SEARCH, MENU_TEXT_SETTINGS,
    MENU_TEXT_MAIN_MENU, CARDS_PER_PAGE, SheetCols # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
)

logger = logging.getLogger(__name__)


async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    is_boss = (str(update.effective_user.id) == g_sheets.os.getenv("BOSS_ID"))
    keyboard = keyboards.get_settings_keyboard(is_boss)
    await update.message.reply_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=keyboard)


async def back_to_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø–æ–¥–º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    is_boss = (str(query.from_user.id) == g_sheets.os.getenv("BOSS_ID"))
    keyboard = keyboards.get_settings_keyboard(is_boss)
    await query.edit_message_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=keyboard)


async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    query = update.callback_query
    await query.answer()
    help_text = (
        "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        f"‚ñ´Ô∏è <b>{MENU_TEXT_SUBMIT}</b> - –∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã.\n"
        f"‚ñ´Ô∏è <b>{MENU_TEXT_SETTINGS}</b> - –¥–æ—Å—Ç—É–ø –∫ –∑–∞—è–≤–∫–∞–º, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç—É.\n"
        f"‚ñ´Ô∏è <b>{MENU_TEXT_SEARCH}</b> - –ø–æ–∏—Å–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞—è–≤–∫–∞–º.\n"
        f"‚ñ´Ô∏è <b>{MENU_TEXT_MAIN_MENU}</b> - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
    )
    await query.edit_message_text(help_text, reply_markup=keyboards.get_back_to_settings_keyboard(), parse_mode=ParseMode.HTML)


async def stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    query = update.callback_query
    user_id = str(query.from_user.id)
    is_boss = (user_id == g_sheets.os.getenv("BOSS_ID"))
    await query.edit_message_text("üìä –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    cards_data = g_sheets.get_cards_from_sheet(user_id=None if is_boss else user_id)

    if not cards_data:
        await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=keyboards.get_back_to_settings_keyboard())
        return

    total_cards = len(cards_data)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    barter_count = sum(1 for c in cards_data if c.get(SheetCols.CARD_TYPE_COL) == '–ë–∞—Ä—Ç–µ—Ä')
    category_counter = Counter(c.get(SheetCols.CATEGORY_COL) for c in cards_data if c.get(SheetCols.CATEGORY_COL))
    most_common_category = category_counter.most_common(1)[0][0] if category_counter else "‚Äì"

    text = (f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üóÇÔ∏è {'–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ' if is_boss else '–ü–æ–¥–∞–Ω–æ –≤–∞–º–∏ –∑–∞—è–≤–æ–∫'}: <b>{total_cards}</b>\n"
            f"    - –ö–∞—Ä—Ç '–ë–∞—Ä—Ç–µ—Ä': <code>{barter_count}</code>\n"
            f"    - –ö–∞—Ä—Ç '–°–∫–∏–¥–∫–∞': <code>{total_cards - barter_count}</code>\n\n"
            f"üìà –°–∞–º–∞—è —á–∞—Å—Ç–∞—è —Å—Ç–∞—Ç—å—è: <b>{most_common_category}</b>")
    await query.edit_message_text(text, reply_markup=keyboards.get_back_to_settings_keyboard(), parse_mode=ParseMode.HTML)


async def export_csv_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CSV —Ñ–∞–π–ª —Å –∑–∞—è–≤–∫–∞–º–∏."""
    query = update.callback_query
    user_id = str(query.from_user.id)
    is_boss = (user_id == g_sheets.os.getenv("BOSS_ID"))
    await query.edit_message_text("üìÑ –§–æ—Ä–º–∏—Ä—É—é CSV —Ñ–∞–π–ª...")
    cards_to_export = g_sheets.get_cards_from_sheet(user_id=None if is_boss else user_id)

    if not cards_to_export:
        await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=keyboards.get_back_to_settings_keyboard())
        return

    output = io.StringIO()
    if cards_to_export:
        writer = csv.DictWriter(output, fieldnames=cards_to_export[0].keys())
        writer.writeheader()
        writer.writerows(cards_to_export)
        output.seek(0)
        file_to_send = InputFile(output.getvalue().encode('utf-8-sig'), filename=f"export_{datetime.now().strftime('%Y-%m-%d')}.csv")
        await context.bot.send_document(chat_id=query.message.chat_id, document=file_to_send)
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–§–æ—Ä–º–∏—Ä—É—é CSV..."
        await query.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await query.message.reply_text("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=keyboards.get_back_to_settings_keyboard())


async def display_paginated_list(update: Update, context: ContextTypes.DEFAULT_TYPE, message_to_edit, page: int, data_key: str, list_title: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    all_items = context.user_data.get(data_key, [])

    if not all_items:
        await message_to_edit.edit_text("ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=keyboards.get_back_to_settings_keyboard())
        return

    start_index = page * CARDS_PER_PAGE
    end_index = start_index + CARDS_PER_PAGE
    items_on_page = all_items[start_index:end_index]
    total_pages = (len(all_items) + CARDS_PER_PAGE - 1) // CARDS_PER_PAGE

    text = f"<b>{list_title} (–°—Ç—Ä. {page + 1}/{total_pages}):</b>\n\n"
    for card in items_on_page:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        owner_name = f"{card.get(SheetCols.OWNER_FIRST_NAME_COL,'')} {card.get(SheetCols.OWNER_LAST_NAME_COL,'-')}".strip()
        amount_text = ""
        if card.get(SheetCols.AMOUNT_COL):
            card_type_str = card.get(SheetCols.CARD_TYPE_COL)
            amount_val = card.get(SheetCols.AMOUNT_COL)
            amount_text = f"üí∞ {'–°–∫–∏–¥–∫–∞' if card_type_str == '–°–∫–∏–¥–∫–∞' else '–ë–∞—Ä—Ç–µ—Ä'}: {amount_val}{'%' if card_type_str == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'}\n"

        text += (f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_name}\nüìû –ù–æ–º–µ—Ä: {card.get(SheetCols.CARD_NUMBER_COL, '-')}\n{amount_text}"
                 f"<b>–°—Ç–∞—Ç—É—Å:</b> <code>{card.get(SheetCols.STATUS_COL, '‚Äì')}</code>\nüìÖ {card.get(SheetCols.TIMESTAMP, '-')}\n")

        if str(update.effective_user.id) == g_sheets.os.getenv("BOSS_ID"):
            text += f"ü§µ‚Äç‚ôÇÔ∏è <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {card.get(SheetCols.FIO_INITIATOR, '-')} ({card.get(SheetCols.TG_TAG, '-')})\n"
        text += "--------------------\n"

    row = []
    if page > 0: row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"paginate_{data_key}_{page - 1}"))
    row.append(InlineKeyboardButton(f" {page + 1}/{total_pages} ", callback_data="noop"))
    if end_index < len(all_items): row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"paginate_{data_key}_{page + 1}"))

    await message_to_edit.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup([row, [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]]),
        parse_mode=ParseMode.HTML
    )


async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    _, data_key, page_str = query.data.split('_')
    is_boss = (str(update.effective_user.id) == g_sheets.os.getenv("BOSS_ID"))
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª—é—á–∞ –¥–∞–Ω–Ω—ã—Ö
    if data_key == 'my_cards':
        list_title = "–í—Å–µ –∑–∞—è–≤–∫–∏" if is_boss else "–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
    elif data_key == 'search_results':
        list_title = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"
    else:
        list_title = "–°–ø–∏—Å–æ–∫" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        
    await display_paginated_list(update, context, message_to_edit=query.message, page=int(page_str), data_key=data_key, list_title=list_title)


async def noop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—É—Å—Ç–æ–π –∫–æ–ª–±—ç–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü)."""
    await update.callback_query.answer()


async def my_cards_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫."""
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    is_boss = (user_id == g_sheets.os.getenv("BOSS_ID"))
    await query.edit_message_text("üëë –ó–∞–≥—Ä—É–∂–∞—é –í–°–ï –∑–∞—è–≤–∫–∏..." if is_boss else "üîç –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞—è–≤–∫–∏...")

    all_cards = g_sheets.get_cards_from_sheet(user_id=None if is_boss else user_id)
    
    data_key = 'my_cards'
    context.user_data[data_key] = all_cards
    list_title = "–í—Å–µ –∑–∞—è–≤–∫–∏" if is_boss else "–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
    
    await display_paginated_list(update, context, message_to_edit=query.message, page=0, data_key=data_key, list_title=list_title)
