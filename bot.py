# -*- coding: utf-8 -*-

import logging
import os
import re
import json
from datetime import datetime
import asyncio
import io
import csv
from collections import Counter

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import gspread
from google.oauth2.service_account import Credentials

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BOSS_ID = os.getenv("BOSS_ID")
CARDS_PER_PAGE = 7

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
(
    REGISTER_CONTACT, REGISTER_FIO, REGISTER_EMAIL, REGISTER_JOB_TITLE,
    OWNER_LAST_NAME, OWNER_FIRST_NAME,
    REASON, CARD_TYPE, CARD_NUMBER, CATEGORY, AMOUNT,
    FREQUENCY, COMMENT, CONFIRMATION,
    SEARCH_CHOOSE_FIELD, AWAIT_SEARCH_QUERY
) = range(16)


# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° GOOGLE SHEETS ---
def get_gspread_client():
    try:
        creds_json_str = os.getenv("GOOGLE_CREDS_JSON")
        if creds_json_str:
            creds_info = json.loads(creds_json_str)
            scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
            creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
            return gspread.authorize(creds)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Google Sheets: {e}")
    return None

def find_initiator_in_sheet(user_id: str):
    client = get_gspread_client()
    if not client: return None
    try:
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_KEY")).sheet1
        all_rows = sheet.get_all_values()
        for row in reversed(all_rows):
            if len(row) > 1 and str(row[1]) == user_id:
                if len(row) >= 7:
                    return {"initiator_username": row[2], "initiator_email": row[3], "initiator_fio": row[4], "initiator_job_title": row[5], "initiator_phone": row[6]}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ: {e}")
    return None

def get_cards_from_sheet(user_id: str = None) -> list:
    client = get_gspread_client()
    if not client: return []
    try:
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_KEY")).sheet1
        all_records = sheet.get_all_records() 
        if user_id:
            user_cards = [record for record in all_records if str(record.get('–¢–ì –ó–∞–ø–æ–ª–Ω—è—é—â–µ–≥–æ')) == user_id]
        else:
            user_cards = all_records
        return list(reversed(user_cards))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    return []

def write_to_sheet(data: dict, submission_time: str, tg_user_id: str):
    client = get_gspread_client()
    if not client: return False
    try:
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_KEY")).sheet1
        header = sheet.row_values(1)
        row_map = {
            '–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏': submission_time,
            '–¢–ì –ó–∞–ø–æ–ª–Ω—è—é—â–µ–≥–æ': tg_user_id,
            '–¢–µ–≥ Telegram': data.get('initiator_username', '‚Äì'),
            '–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã': data.get('initiator_email', ''),
            '–§–ò–û –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞': data.get('initiator_fio', ''),
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å': data.get('initiator_job_title', ''),
            '–¢–µ–ª–µ—Ñ–æ–Ω –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞': data.get('initiator_phone', ''),
            '–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞': data.get('owner_last_name', ''),
            '–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã': data.get('owner_first_name', ''),
            '–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –±–∞—Ä—Ç–µ—Ä–∞/—Å–∫–∏–¥–∫–∏': data.get('reason', ''),
            '–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?': data.get('card_type', ''),
            '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã': data.get('card_number', ''),
            '–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç': data.get('category', ''),
            '–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞ –∏–ª–∏ % —Å–∫–∏–¥–∫–∏': data.get('amount', ''),
            '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ä—Ç–µ—Ä–∞': data.get('frequency', ''),
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–∞–∫–æ–º—É –±–∞—Ä—É)': data.get('comment', ''),
            '–°—Ç–∞—Ç—É—Å –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è': '–ó–∞—è–≤–∫–∞'
        }
        final_row = [row_map.get(h, '') for h in header]
        sheet.append_row(final_row, value_input_option='USER_ENTERED')
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_user_id}")
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
    return False

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –°–ò–°–¢–ï–ú–ê –ù–ê–í–ò–ì–ê–¶–ò–ò ---
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [["‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"], ["üîç –ü–æ–∏—Å–∫", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    cards_button_text = "üóÇÔ∏è –í—Å–µ –∑–∞—è–≤–∫–∏" if user_id == BOSS_ID else "üóÇÔ∏è –ú–æ–∏ –ö–∞—Ä—Ç—ã"
    keyboard = [[InlineKeyboardButton(cards_button_text, callback_data="settings_my_cards")], [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_show")], [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv")], [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_show")]]
    await update.message.reply_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=InlineKeyboardMarkup(keyboard))

async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    help_text = ("<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
                 "‚ñ´Ô∏è <b>–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</b> - –∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã.\n"
                 "‚ñ´Ô∏è <b>–í—Å–µ –∫–∞—Ä—Ç—ã / –ú–æ–∏ –ö–∞—Ä—Ç—ã</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ (–≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö).\n"
                 "‚ñ´Ô∏è <b>–ü–æ–∏—Å–∫</b> - –ø–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∫–∞–º.\n"
                 "‚ñ´Ô∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> - —Å–±—Ä–æ—Å –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
                 "–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–∏—Ç –µ–µ.")
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]]
    await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

async def back_to_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    cards_button_text = "üóÇÔ∏è –í—Å–µ –∑–∞—è–≤–∫–∏" if user_id == BOSS_ID else "üóÇÔ∏è –ú–æ–∏ –ö–∞—Ä—Ç—ã"
    keyboard = [[InlineKeyboardButton(cards_button_text, callback_data="settings_my_cards")], [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_show")], [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv")], [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_show")]]
    await query.edit_message_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=InlineKeyboardMarkup(keyboard))

async def stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = str(query.from_user.id)
    is_boss = (user_id == BOSS_ID)
    await query.edit_message_text("üìä –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    all_cards = get_cards_from_sheet() if is_boss else get_cards_from_sheet(user_id)
    if not all_cards: await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."); return
    total_cards = len(all_cards)
    barter_count = sum(1 for card in all_cards if card.get('–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?') == '–ë–∞—Ä—Ç–µ—Ä')
    discount_count = total_cards - barter_count
    try:
        category_counter = Counter(card.get('–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç') for card in all_cards if card.get('–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç'))
        most_common_category = category_counter.most_common(1)[0][0] if category_counter else "‚Äì"
    except Exception: most_common_category = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å"
    text = f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    if is_boss: text += f"üóÇÔ∏è –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: <b>{total_cards}</b>\n"
    else: text += f"üóÇÔ∏è –ü–æ–¥–∞–Ω–æ –≤–∞–º–∏ –∑–∞—è–≤–æ–∫: <b>{total_cards}</b>\n"
    text += f"    - –ö–∞—Ä—Ç '–ë–∞—Ä—Ç–µ—Ä': <code>{barter_count}</code>\n"
    text += f"    - –ö–∞—Ä—Ç '–°–∫–∏–¥–∫–∞': <code>{discount_count}</code>\n\n"
    text += f"üìà –°–∞–º–∞—è —á–∞—Å—Ç–∞—è —Å—Ç–∞—Ç—å—è: <b>{most_common_category}</b>"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

async def export_csv_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = str(query.from_user.id)
    is_boss = (user_id == BOSS_ID)
    await query.edit_message_text("üìÑ –§–æ—Ä–º–∏—Ä—É—é CSV —Ñ–∞–π–ª...")
    cards_to_export = get_cards_from_sheet() if is_boss else get_cards_from_sheet(user_id)
    if not cards_to_export: await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."); return
    output = io.StringIO()
    writer = csv.DictWriter(output, fieldnames=cards_to_export[0].keys())
    writer.writeheader()
    writer.writerows(cards_to_export)
    output.seek(0)
    file_to_send = InputFile(output.getvalue().encode('utf-8-sig'), filename=f"export_{datetime.now().strftime('%Y-%m-%d')}.csv")
    await context.bot.send_document(chat_id=query.message.chat_id, document=file_to_send)
    await query.message.delete()


# --- –ü–ê–ì–ò–ù–ê–¶–ò–Ø –ò –ü–û–ò–°–ö ---
async def display_paginated_list(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int, data_key: str, list_title: str):
    message_to_edit = update.callback_query.message if update.callback_query else update.message
    all_items = context.user_data.get(data_key, [])
    if not all_items: await message_to_edit.edit_text("ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return
    start_index = page * CARDS_PER_PAGE
    end_index = start_index + CARDS_PER_PAGE
    items_on_page = all_items[start_index:end_index]
    total_pages = (len(all_items) + CARDS_PER_PAGE - 1) // CARDS_PER_PAGE
    text = f"<b>{list_title} (–°—Ç—Ä. {page + 1}/{total_pages}):</b>\n\n"
    for card in items_on_page:
        owner_name = f"{card.get('–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã','')} {card.get('–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞','-')}".strip()
        amount = card.get('–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞ –∏–ª–∏ % —Å–∫–∏–¥–∫–∏', '')
        amount_text = ""
        if amount:
            if card.get('–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?') == '–°–∫–∏–¥–∫–∞': amount_text = f"üí∞ –°–∫–∏–¥–∫–∞: {amount}%\n"
            else: amount_text = f"üí∞ –ë–∞—Ä—Ç–µ—Ä: {amount} ‚ÇΩ\n"
        text += (f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_name}\nüìû –ù–æ–º–µ—Ä: {card.get('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', '-')}\n{amount_text}"
                 f"<b>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ:</b> <code>{card.get('–°—Ç–∞—Ç—É—Å –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è', '‚Äì')}</code>\n"
                 f"<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> <code>{card.get('–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '‚Äì')}</code>\n"
                 f"üìÖ –î–∞—Ç–∞: {card.get('–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏', '-')}\n")
        if str(update.effective_user.id) == BOSS_ID:
            text += f"ü§µ‚Äç‚ôÇÔ∏è <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {card.get('–§–ò–û –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', '-')} ({card.get('–¢–µ–≥ Telegram', '-')})\n"
        text += "--------------------\n"
    keyboard = []
    row = []
    if page > 0: row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"paginate_{data_key}_{page - 1}"))
    row.append(InlineKeyboardButton(f" —Å—Ç—Ä. {page + 1}/{total_pages} ", callback_data="noop"))
    if end_index < len(all_items): row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"paginate_{data_key}_{page + 1}"))
    keyboard.append(row)
    await message_to_edit.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    _, data_key, page_str = query.data.split('_')
    page = int(page_str)
    list_title = "–í—Å–µ –∑–∞—è–≤–∫–∏" if data_key == "mycards" and str(update.effective_user.id) == BOSS_ID else "–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
    await display_paginated_list(update, context, page=page, data_key=data_key, list_title=list_title)
async def noop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
async def my_cards_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    effective_message = update.message or update.callback_query.message
    user_id = str(update.effective_user.id)
    is_boss = (user_id == BOSS_ID)
    loading_message = await effective_message.reply_text("üëë –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º: –ó–∞–≥—Ä—É–∂–∞—é –í–°–ï –∑–∞—è–≤–∫–∏..." if is_boss else "üîç –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞—è–≤–∫–∏...")
    all_cards = get_cards_from_sheet() if is_boss else get_cards_from_sheet(user_id)
    if not all_cards: await loading_message.edit_text("ü§∑ –ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return
    context.user_data['mycards'] = all_cards
    await display_paginated_list(update, context, page=0, data_key='mycards', list_title="–í—Å–µ –∑–∞—è–≤–∫–∏" if is_boss else "–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [[InlineKeyboardButton("–ü–æ –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞", callback_data="search_by_name")],[InlineKeyboardButton("–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã", callback_data="search_by_phone")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SEARCH_CHOOSE_FIELD
async def search_field_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['search_field'] = query.data
    await query.edit_message_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    return AWAIT_SEARCH_QUERY
async def perform_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    is_boss = (user_id == BOSS_ID)
    search_query = update.message.text.lower()
    search_field = context.user_data.get('search_field')
    loading_message = await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
    all_cards = get_cards_from_sheet() if is_boss else get_cards_from_sheet(user_id)
    if not all_cards: await loading_message.edit_text("ü§∑ –ó–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ—Ç."); return ConversationHandler.END
    if search_field == 'search_by_name':
        search_results = [card for card in all_cards if search_query in card.get('–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã', '').lower() or search_query in card.get('–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞', '').lower()]
    elif search_field == 'search_by_phone':
        search_results = [card for card in all_cards if search_query in card.get('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', '')]
    else: search_results = []
    context.user_data['search'] = search_results
    await display_paginated_list(update, context, page=0, data_key='search', list_title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    return ConversationHandler.END


# --- –î–ò–ê–õ–û–ì –ü–û–î–ê–ß–ò –ó–ê–Ø–í–ö–ò –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô ---
async def start_form_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    add_message_to_delete(context, update.message.message_id)
    user_id = str(update.effective_user.id)
    if context.user_data.get('initiator_registered'):
        msg = await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∞—á—É –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.\n\n–í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.HTML, reply_markup=ReplyKeyboardRemove())
        add_message_to_delete(context, msg.message_id)
        return OWNER_LAST_NAME
    initiator_data = find_initiator_in_sheet(user_id)
    if initiator_data:
        context.user_data.update(initiator_data)
        context.user_data['initiator_registered'] = True
        msg = await update.message.reply_text(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {initiator_data['initiator_fio']}!\n\n–í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.HTML, reply_markup=ReplyKeyboardRemove())
        add_message_to_delete(context, msg.message_id)
        return OWNER_LAST_NAME
    else:
        keyboard = [[KeyboardButton("üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è (–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º)", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        msg = await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ—Ö–æ–∂–µ, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.", reply_markup=reply_markup)
        add_message_to_delete(context, msg.message_id)
        return REGISTER_CONTACT
async def handle_contact_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    contact = update.message.contact
    user = update.effective_user
    if contact.user_id != user.id:
        msg = await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", reply_markup=ReplyKeyboardRemove())
        add_message_to_delete(context, msg.message_id)
        return await cancel(update, context)
    context.user_data['initiator_phone'] = contact.phone_number.replace('+', '')
    context.user_data['initiator_username'] = f"@{user.username}" if user.username else "‚Äì"
    msg = await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –§–ò–û</b> –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.", reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
    add_message_to_delete(context, msg.message_id)
    return REGISTER_FIO
async def get_registration_fio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    context.user_data['initiator_fio'] = update.message.text
    msg = await update.message.reply_text("‚úÖ –§–ò–û –ø—Ä–∏–Ω—è—Ç–æ.\n\nüìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É</b>.", parse_mode=ParseMode.HTML)
    add_message_to_delete(context, msg.message_id)
    return REGISTER_EMAIL
async def get_registration_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    email = update.message.text
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        msg = await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        add_message_to_delete(context, msg.message_id)
        return REGISTER_EMAIL
    context.user_data['initiator_email'] = email
    msg = await update.message.reply_text("‚úÖ –ü–æ—á—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\nüè¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–¥–æ–ª–∂–Ω–æ—Å—Ç—å</b>.", parse_mode=ParseMode.HTML)
    add_message_to_delete(context, msg.message_id)
    return REGISTER_JOB_TITLE
async def get_registration_job_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    context.user_data['initiator_job_title'] = update.message.text
    context.user_data['initiator_registered'] = True
    await delete_messages(context, update.effective_chat.id)
    await update.message.reply_text("üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>", parse_mode=ParseMode.HTML)
    await show_main_menu(update, context)
    return ConversationHandler.END
async def get_owner_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    context.user_data['owner_last_name'] = update.message.text
    msg = await update.message.reply_text("<b>–ò–º—è</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.HTML)
    add_message_to_delete(context, msg.message_id)
    return OWNER_FIRST_NAME
async def get_owner_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    context.user_data['owner_first_name'] = update.message.text
    msg = await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏?")
    add_message_to_delete(context, msg.message_id)
    return REASON
async def get_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    context.user_data['reason'] = update.message.text
    keyboard = [[InlineKeyboardButton("–ë–∞—Ä—Ç–µ—Ä", callback_data="–ë–∞—Ä—Ç–µ—Ä"), InlineKeyboardButton("–°–∫–∏–¥–∫–∞", callback_data="–°–∫–∏–¥–∫–∞")]]
    msg = await update.message.reply_text("–¢–∏–ø –∫–∞—Ä—Ç—ã?", reply_markup=InlineKeyboardMarkup(keyboard))
    add_message_to_delete(context, msg.message_id)
    return CARD_TYPE
async def get_card_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['card_type'] = query.data
    await query.message.delete()
    msg = await context.bot.send_message(chat_id=query.message.chat_id, text=f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ 8)?")
    add_message_to_delete(context, msg.message_id)
    return CARD_NUMBER
async def get_card_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    number = update.message.text
    if not (number.startswith('8') and number[1:].isdigit() and len(number) == 11):
        msg = await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8.")
        add_message_to_delete(context, msg.message_id)
        return CARD_NUMBER
    context.user_data['card_number'] = number
    keyboard = [[InlineKeyboardButton("–ê–†–¢", callback_data="–ê–†–¢"), InlineKeyboardButton("–ú–ê–†–ö–ï–¢", callback_data="–ú–ê–†–ö–ï–¢")], [InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫", callback_data="–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫")], [InlineKeyboardButton("–°–ö–ò–î–ö–ê", callback_data="–°–ö–ò–î–ö–ê"), InlineKeyboardButton("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")], [InlineKeyboardButton("–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏", callback_data="–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏")]]
    msg = await update.message.reply_text("–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))
    add_message_to_delete(context, msg.message_id)
    return CATEGORY
async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['category'] = query.data
    prompt = "–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞?" if context.user_data.get('card_type') == "–ë–∞—Ä—Ç–µ—Ä" else "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏?"
    await query.message.delete()
    msg = await context.bot.send_message(chat_id=query.message.chat_id, text=f"–°—Ç–∞—Ç—å—è: {query.data}.\n\n{prompt}")
    add_message_to_delete(context, msg.message_id)
    return AMOUNT
async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    text = update.message.text
    if not text.isdigit():
        msg = await update.message.reply_text("–ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        add_message_to_delete(context, msg.message_id)
        return AMOUNT
    context.user_data['amount'] = text
    keyboard = [[InlineKeyboardButton("–†–∞–∑–æ–≤–∞—è", callback_data="–†–∞–∑–æ–≤–∞—è")], [InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É", callback_data="–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É")], [InlineKeyboardButton("–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã", callback_data="–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã")]]
    msg = await update.message.reply_text("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    add_message_to_delete(context, msg.message_id)
    return FREQUENCY
async def get_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['frequency'] = query.data
    await query.message.delete()
    msg = await context.bot.send_message(chat_id=query.message.chat_id, text=f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n–ì–æ—Ä–æ–¥_–ë–ê–† –≤—ã–¥–∞—á–∏?")
    add_message_to_delete(context, msg.message_id)
    return COMMENT
def format_summary(data: dict) -> str:
    owner_full_name = f"{data.get('owner_first_name', '')} {data.get('owner_last_name', '')}".strip()
    return ("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é –∑–∞—è–≤–∫—É:</b>\n\n"
            "--- <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</b> ---\n"
            f"üë§ <b>–§–ò–û:</b> {data.get('initiator_fio', '-')}\n"
            f"üìß <b>–ü–æ—á—Ç–∞:</b> {data.get('initiator_email', '-')}\n"
            f"üè¢ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {data.get('initiator_job_title', '-')}\n\n"
            "--- <b>–ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b> ---\n"
            f"üí≥ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_full_name}\n"
            f"üìû <b>–ù–æ–º–µ—Ä:</b> {data.get('card_number', '-')}\n"
            f"   <i>(–æ–Ω –∂–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞)</i>\n"
            f"‚ú® <b>–¢–∏–ø:</b> {data.get('card_type', '-')}\n"
            f"üí∞ <b>{ '–°–∫–∏–¥–∫–∞' if data.get('card_type') == '–°–∫–∏–¥–∫–∞' else '–°—É–º–º–∞' }:</b> {data.get('amount', '0')}{'%' if data.get('card_type') == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'}\n"
            f"üìà <b>–°—Ç–∞—Ç—å—è:</b> {data.get('category', '-')}\n"
            f"üîÑ <b>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:</b> {data.get('frequency', '-')}\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data.get('comment', '-')}\n\n"
            "<i>–í—Å–µ –≤–µ—Ä–Ω–æ?</i>")
async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    add_message_to_delete(context, update.message.message_id)
    context.user_data['comment'] = update.message.text
    summary = format_summary(context.user_data)
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="submit"), InlineKeyboardButton("‚ùå –ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    await delete_messages(context, update.effective_chat.id)
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return CONFIRMATION
async def submit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    success = write_to_sheet(context.user_data, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), user_id)
    original_text = query.message.text_html
    status_text = "\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞." if success else "\n\n<b>–°—Ç–∞—Ç—É—Å:</b> ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É."
    await query.edit_message_text(text=original_text + status_text, parse_mode=ParseMode.HTML, reply_markup=None)
    await show_main_menu(update, context)
    return ConversationHandler.END
async def restart_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    return await start_form_conversation(update, context)
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await delete_messages(context, update.effective_chat.id)
    await update.message.reply_text("–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_main_menu(update, context)
    return ConversationHandler.END

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---
def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    form_filter = filters.Regex("^(‚úçÔ∏è )?–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$")
    search_filter = filters.Regex("^(üîç )?–ü–æ–∏—Å–∫$")
    settings_filter = filters.Regex("^(‚öôÔ∏è )?–ù–∞—Å—Ç—Ä–æ–π–∫–∏$")
    main_menu_filter = filters.Regex("^(üè† )?–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$")
    
    state_text_filter = filters.TEXT & ~filters.COMMAND & ~form_filter & ~search_filter & ~settings_filter & ~main_menu_filter
    
    cancel_handler = CommandHandler("cancel", cancel)
    fallback_handler = MessageHandler(search_filter | settings_filter | main_menu_filter, cancel)

    form_conv = ConversationHandler(
        entry_points=[MessageHandler(form_filter, start_form_conversation)],
        states={
            REGISTER_CONTACT: [MessageHandler(filters.CONTACT, handle_contact_registration)],
            REGISTER_FIO: [MessageHandler(state_text_filter, get_registration_fio)],
            REGISTER_EMAIL: [MessageHandler(state_text_filter, get_registration_email)],
            REGISTER_JOB_TITLE: [MessageHandler(state_text_filter, get_registration_job_title)],
            OWNER_LAST_NAME: [MessageHandler(state_text_filter, get_owner_last_name)], 
            OWNER_FIRST_NAME: [MessageHandler(state_text_filter, get_owner_first_name)],
            REASON: [MessageHandler(state_text_filter, get_reason)], 
            CARD_TYPE: [CallbackQueryHandler(get_card_type)],
            CARD_NUMBER: [MessageHandler(state_text_filter, get_card_number)], 
            CATEGORY: [CallbackQueryHandler(get_category)],
            AMOUNT: [MessageHandler(state_text_filter, get_amount)], 
            FREQUENCY: [CallbackQueryHandler(get_frequency)],
            COMMENT: [MessageHandler(state_text_filter, get_comment)],
            CONFIRMATION: [CallbackQueryHandler(submit, pattern="^submit$"), CallbackQueryHandler(restart_conversation, pattern="^restart$")],
        },
        fallbacks=[fallback_handler, cancel_handler],
    )
    search_conv = ConversationHandler(
        entry_points=[MessageHandler(search_filter, search_command)],
        states={
            SEARCH_CHOOSE_FIELD: [CallbackQueryHandler(search_field_chosen)],
            AWAIT_SEARCH_QUERY: [MessageHandler(state_text_filter, perform_search)]
        },
        fallbacks=[MessageHandler(form_filter | settings_filter | main_menu_filter, cancel), cancel_handler],
    )

    application.add_handler(CommandHandler("start", show_main_menu))
    application.add_handler(MessageHandler(main_menu_filter, show_main_menu))
    application.add_handler(form_conv)
    application.add_handler(search_conv)
    application.add_handler(MessageHandler(settings_filter, show_settings))
    
    application.add_handler(CallbackQueryHandler(settings_my_cards_callback, pattern="^settings_my_cards$"))
    application.add_handler(CallbackQueryHandler(help_callback, pattern="^help_show$"))
    application.add_handler(CallbackQueryHandler(stats_callback, pattern="^stats_show$"))
    application.add_handler(CallbackQueryHandler(export_csv_callback, pattern="^export_csv$"))
    application.add_handler(CallbackQueryHandler(back_to_settings_callback, pattern="^back_to_settings$"))
    application.add_handler(CallbackQueryHandler(handle_pagination, pattern=r"^paginate_"))
    application.add_handler(CallbackQueryHandler(noop_callback, pattern=r"^noop$"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
