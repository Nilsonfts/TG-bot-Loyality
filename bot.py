# -*- coding: utf-8 -*-

import logging
import os
import re
import json
from datetime import datetime
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import gspread
from google.oauth2.service_account import Credentials

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CARDS_PER_PAGE = 5

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
(
    EMAIL, FIO_INITIATOR, JOB_TITLE, OWNER_LAST_NAME, OWNER_FIRST_NAME,
    REASON, CARD_TYPE, CARD_NUMBER, CATEGORY, AMOUNT,
    FREQUENCY, COMMENT, CONFIRMATION,
    AWAIT_SEARCH_QUERY
) = range(14)


# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° GOOGLE SHEETS ---
def get_gspread_client():
    try:
        creds_json_str = os.getenv("GOOGLE_CREDS_JSON")
        if creds_json_str:
            creds_info = json.loads(creds_json_str)
            scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
            creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
            return gspread.authorize(creds)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Google Sheets: {e}")
    return None

def get_all_user_cards_from_sheet(user_id: str) -> list:
    client = get_gspread_client()
    if not client: return []
    try:
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_KEY")).sheet1
        all_rows = sheet.get_all_values()
        data_rows = all_rows[1:]
        user_cards = []
        for row in data_rows:
            if len(row) > 1 and str(row[1]) == user_id:
                if len(row) >= 19:
                    card_info = {
                        "date": row[0], "owner_first_name": row[6], "owner_last_name": row[5],
                        "card_number": row[9], "status_q": row[16] or "‚Äì", "status_s": row[18] or "‚Äì"
                    }
                    cards.append(card_info)
        return list(reversed(user_cards))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    return []

def write_to_sheet(data: dict, submission_time: str, tg_user_id: str):
    client = get_gspread_client()
    if not client: return False
    try:
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_KEY")).sheet1
        row_to_insert = [
            submission_time, tg_user_id, data.get('email', ''), data.get('fio_initiator', ''),
            data.get('job_title', ''), data.get('owner_last_name', ''), data.get('owner_first_name', ''),
            data.get('reason', ''), data.get('card_type', ''), data.get('card_number', ''),
            data.get('category', ''), data.get('amount', ''), data.get('frequency', ''),
            data.get('comment', ''), '', '', '', '', ''
        ]
        sheet.append_row(row_to_insert, value_input_option='USER_ENTERED')
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
    return False

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –î–†–£–ì–ò–ï –ö–û–ú–ê–ù–î–´ ---
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [["‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"], ["üóÇÔ∏è –ú–æ–∏ –ö–∞—Ä—Ç—ã", "üîç –ü–æ–∏—Å–∫", "‚ùì –ü–æ–º–æ—â—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = ("<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
                 "‚ñ´Ô∏è <b>–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</b> - –∑–∞–ø—É—Å–∫ –ø–æ—à–∞–≥–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã.\n"
                 "‚ñ´Ô∏è <b>–ú–æ–∏ –ö–∞—Ä—Ç—ã</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–∞—è–≤–æ–∫.\n"
                 "‚ñ´Ô∏è <b>–ü–æ–∏—Å–∫</b> - –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º –∑–∞—è–≤–∫–∞–º.\n\n"
                 "–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# ... (–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def display_paginated_list(message_to_edit, context: ContextTypes.DEFAULT_TYPE, page: int, data_key: str, list_title: str):
    all_items = context.user_data.get(data_key, [])
    if not all_items:
        await message_to_edit.edit_text("ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    start_index = page * CARDS_PER_PAGE
    end_index = start_index + CARDS_PER_PAGE
    items_on_page = all_items[start_index:end_index]
    total_pages = (len(all_items) + CARDS_PER_PAGE - 1) // CARDS_PER_PAGE
    text = f"<b>{list_title} (–°—Ç—Ä. {page + 1}/{total_pages}):</b>\n\n"
    for card in items_on_page:
        owner_name = f"{card.get('owner_first_name','')} {card.get('owner_last_name','-')}".strip()
        text += (f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_name}\n"
                 f"üìû –ù–æ–º–µ—Ä: {card['card_number']}\n"
                 f"<b>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ:</b> <code>{card['status_q']}</code> | <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> <code>{card['status_s']}</code>\n"
                 f"üìÖ –î–∞—Ç–∞: {card['date']}\n"
                 f"--------------------\n")
    keyboard = []
    row = []
    if page > 0:
        row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"paginate_{data_key}_{page - 1}"))
    row.append(InlineKeyboardButton(f" —Å—Ç—Ä. {page + 1}/{total_pages} ", callback_data="noop"))
    if end_index < len(all_items):
        row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"paginate_{data_key}_{page + 1}"))
    keyboard.append(row)
    await message_to_edit.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    _, data_key, page_str = query.data.split('_')
    page = int(page_str)
    list_title = "–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏" if data_key == "mycards" else "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"
    await display_paginated_list(query.message, context, page=page, data_key=data_key, list_title=list_title)
async def noop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
async def my_cards_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    loading_message = await update.message.reply_text("üîç –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞—è–≤–∫–∏...")
    all_cards = get_all_user_cards_from_sheet(user_id)
    if not all_cards:
        await loading_message.edit_text("ü§∑ –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏.")
        return
    context.user_data['mycards'] = all_cards
    await display_paginated_list(loading_message, context, page=0, data_key='mycards', list_title="–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ (–∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):")
    return AWAIT_SEARCH_QUERY
async def perform_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    search_query = update.message.text.lower()
    loading_message = await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
    all_cards = get_all_user_cards_from_sheet(user_id)
    if not all_cards:
        await loading_message.edit_text("ü§∑ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return ConversationHandler.END
    search_results = [card for card in all_cards if search_query in card['owner_first_name'].lower() or search_query in card['owner_last_name'].lower() or search_query in card['card_number']]
    context.user_data['search'] = search_results
    await display_paginated_list(loading_message, context, page=0, data_key='search', list_title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    return ConversationHandler.END

# --- –ù–û–í–´–ô –î–ò–ê–õ–û–ì –ü–û–î–ê–ß–ò –ó–ê–Ø–í–ö–ò –° "–ñ–ò–í–´–ú" –ß–ï–ö-–õ–ò–°–¢–û–ú ---

def format_live_summary(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç '–∂–∏–≤—É—é' –∫–∞—Ä—Ç–æ—á–∫—É-–∑–∞—è–≤–∫—É —Å –≥–∞–ª–æ—á–∫–∞–º–∏."""
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ø–æ–ª–µ–π
    def field(emoji, label, value_key, default="..."):
        return f"{emoji} <b>{label}:</b> {data[value_key]}\n" if value_key in data else f"‚è≥ <b>{label}:</b> {default}\n"

    text = "<b>–ó–∞—è–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n\n"
    text += "--- <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä</b> ---\n"
    text += field("üë§", "–§–ò–û", 'fio_initiator')
    text += field("üìß", "–ü–æ—á—Ç–∞", 'email')
    text += field("üè¢", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", 'job_title')
    text += "\n--- <b>–ö–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</b> ---\n"
    text += field("üí≥", "–í–ª–∞–¥–µ–ª–µ—Ü", 'owner_full_name')
    text += field("üìû", "–ù–æ–º–µ—Ä", 'card_number')
    text += field("‚ú®", "–¢–∏–ø", 'card_type')
    text += field("üí∞", "–°—É–º–º–∞/%", 'amount_display')
    text += field("üìà", "–°—Ç–∞—Ç—å—è", 'category')
    text += field("üîÑ", "–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", 'frequency')
    text += field("üí¨", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", 'comment')
    return text

async def update_live_summary(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å '–∂–∏–≤–æ–π' –∫–∞—Ä—Ç–æ—á–∫–æ–π."""
    summary_message_id = context.user_data.get('summary_message_id')
    if summary_message_id:
        text = format_live_summary(context.user_data)
        try:
            await context.bot.edit_message_text(text, chat_id=chat_id, message_id=summary_message_id, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É: {e}")

async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question: str, reply_markup=None):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Ç–∞—Ä—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞–µ—Ç –Ω–æ–≤—ã–π."""
    chat_id = update.effective_chat.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–≤–µ—Ç–æ–º
    try:
        await context.bot.delete_message(chat_id, update.message.message_id)
    except Exception: pass
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞
    if 'question_message_id' in context.user_data:
        try:
            await context.bot.delete_message(chat_id, context.user_data['question_message_id'])
        except Exception: pass
        
    # –ó–∞–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    msg = await context.bot.send_message(chat_id, question, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    context.user_data['question_message_id'] = msg.message_id


async def start_form_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    chat = update.effective_chat
    summary_msg = await chat.send_message(format_live_summary(context.user_data), parse_mode=ParseMode.HTML)
    context.user_data['summary_message_id'] = summary_msg.message_id
    await ask_next_question(update, context, "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É:")
    return EMAIL

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['email'] = update.message.text
    context.user_data['fio_initiator'] = update.effective_user.full_name
    await update_live_summary(context, update.effective_chat.id)
    await ask_next_question(update, context, "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å?")
    return JOB_TITLE

async def get_job_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['job_title'] = update.message.text
    await update_live_summary(context, update.effective_chat.id)
    await ask_next_question(update, context, "üí≥ –í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.")
    return OWNER_LAST_NAME

async def get_owner_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['owner_last_name'] = update.message.text
    await ask_next_question(context, update.effective_chat.id, "üí≥ –í–≤–µ–¥–∏—Ç–µ <b>–ò–º—è</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.")
    return OWNER_FIRST_NAME

async def get_owner_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['owner_first_name'] = update.message.text
    context.user_data['owner_full_name'] = f"{update.message.text} {context.user_data['owner_last_name']}"
    await update_live_summary(context, update.effective_chat.id)
    await ask_next_question(context, update.effective_chat.id, "ü§î –ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏?")
    return REASON

async def get_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['reason'] = update.message.text
    keyboard = [[InlineKeyboardButton("–ë–∞—Ä—Ç–µ—Ä", callback_data="–ë–∞—Ä—Ç–µ—Ä"), InlineKeyboardButton("–°–∫–∏–¥–∫–∞", callback_data="–°–∫–∏–¥–∫–∞")]]
    await ask_next_question(context, update.effective_chat.id, "‚ú® –¢–∏–ø –∫–∞—Ä—Ç—ã?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CARD_TYPE

async def get_card_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['card_type'] = query.data
    await update_live_summary(context, query.message.chat_id)
    await ask_next_question(query, context, "üìû –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ 8)?")
    return CARD_NUMBER

async def get_card_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    number = update.message.text
    if not (number.startswith('8') and number[1:].isdigit() and len(number) == 11):
        await ask_next_question(update, context, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8).")
        return CARD_NUMBER
    context.user_data['card_number'] = number
    await update_live_summary(context, update.effective_chat.id)
    keyboard = [[InlineKeyboardButton("–ê–†–¢", callback_data="–ê–†–¢"), InlineKeyboardButton("–ú–ê–†–ö–ï–¢", callback_data="–ú–ê–†–ö–ï–¢")], [InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫", callback_data="–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫")], [InlineKeyboardButton("–°–ö–ò–î–ö–ê", callback_data="–°–ö–ò–î–ö–ê"), InlineKeyboardButton("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")], [InlineKeyboardButton("–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏", callback_data="–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏")]]
    await ask_next_question(context, update.effective_chat.id, "üìà –°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CATEGORY

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['category'] = query.data
    await update_live_summary(context, query.message.chat_id)
    prompt = "üí∞ –°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞?" if context.user_data.get('card_type') == "–ë–∞—Ä—Ç–µ—Ä" else "üí∞ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏?"
    await ask_next_question(query, context, prompt)
    return AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if not text.isdigit():
        await ask_next_question(update, context, "‚ùå –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return AMOUNT
    context.user_data['amount'] = text
    context.user_data['amount_display'] = f"{text}{'%' if context.user_data.get('card_type') == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'}"
    await update_live_summary(context, update.effective_chat.id)
    keyboard = [[InlineKeyboardButton("–†–∞–∑–æ–≤–∞—è", callback_data="–†–∞–∑–æ–≤–∞—è")], [InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É", callback_data="–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É")], [InlineKeyboardButton("–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã", callback_data="–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã")]]
    await ask_next_question(context, update.effective_chat.id, "üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return FREQUENCY

async def get_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['frequency'] = query.data
    await update_live_summary(context, query.message.chat_id)
    await ask_next_question(query, context, "üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?")
    return COMMENT

async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['comment'] = update.message.text
    await update_live_summary(context, update.effective_chat.id)
    summary_message_id = context.user_data.get('summary_message_id')
    final_text = format_live_summary(context.user_data) + "\n\n<i><b>–í—Å–µ –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º?</b></i>"
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_final")]]
    if 'question_message_id' in context.user_data:
        await context.bot.delete_message(update.effective_chat.id, context.user_data['question_message_id'])
    await context.bot.edit_message_text(final_text, chat_id=update.effective_chat.id, message_id=summary_message_id, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return CONFIRMATION

async def submit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    await asyncio.sleep(1)
    success = write_to_sheet(context.user_data, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), user_id)
    
    final_summary = format_live_summary(context.user_data)
    status_text = "‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞.</b>" if success else "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.</b>"
    final_summary_with_status = final_summary + f"\n<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}"
    
    await query.edit_message_text(text=final_summary_with_status, parse_mode=ParseMode.HTML, reply_markup=None)
    
    await show_main_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —à–∞–≥–µ."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode=ParseMode.HTML)
    await show_main_menu(update, context)
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if context.user_data:
        await update.message.reply_text("–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å '–∂–∏–≤—É—é' –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
        if 'summary_message_id' in context.user_data:
            try:
                await context.bot.delete_message(update.effective_chat.id, context.user_data['summary_message_id'])
            except Exception: pass
        context.user_data.clear()
    await show_main_menu(update, context)
    return ConversationHandler.END


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---
def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    form_filter = filters.Regex("^(‚úçÔ∏è )?–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$")
    cards_filter = filters.Regex("^(üóÇÔ∏è )?–ú–æ–∏ –ö–∞—Ä—Ç—ã$")
    search_filter = filters.Regex("^(üîç )?–ü–æ–∏—Å–∫$")
    help_filter = filters.Regex("^(‚ùì )?–ü–æ–º–æ—â—å$")
    state_text_filter = filters.TEXT & ~filters.COMMAND & ~form_filter & ~cards_filter & ~search_filter & ~help_filter
    
    fallback_handler = MessageHandler(cards_filter | search_filter | help_filter, cancel_conversation)
    cancel_handler = CommandHandler("cancel", cancel_conversation)

    form_conv = ConversationHandler(
        entry_points=[MessageHandler(form_filter, start_form_conversation)],
        states={
            EMAIL: [MessageHandler(state_text_filter, get_email)],
            JOB_TITLE: [MessageHandler(state_text_filter, get_job_title)],
            OWNER_LAST_NAME: [MessageHandler(state_text_filter, get_owner_last_name)], 
            OWNER_FIRST_NAME: [MessageHandler(state_text_filter, get_owner_first_name)],
            REASON: [MessageHandler(state_text_filter, get_reason)], 
            CARD_TYPE: [CallbackQueryHandler(get_card_type)],
            CARD_NUMBER: [MessageHandler(state_text_filter, get_card_number)], 
            CATEGORY: [CallbackQueryHandler(get_category)],
            AMOUNT: [MessageHandler(state_text_filter, get_amount)], 
            FREQUENCY: [CallbackQueryHandler(get_frequency)],
            COMMENT: [MessageHandler(state_text_filter, get_comment)],
            CONFIRMATION: [
                CallbackQueryHandler(submit, pattern="^submit$"), 
                CallbackQueryHandler(cancel_final, pattern="^cancel_final$")
            ],
        },
        fallbacks=[fallback_handler, cancel_handler],
    )

    search_conv = ConversationHandler(
        entry_points=[MessageHandler(search_filter, search_command)],
        states={ AWAIT_SEARCH_QUERY: [MessageHandler(state_text_filter, perform_search)] },
        fallbacks=[MessageHandler(form_filter | cards_filter | help_filter, cancel_conversation), cancel_handler],
    )

    application.add_handler(CommandHandler("start", show_main_menu))
    application.add_handler(form_conv)
    application.add_handler(search_conv)
    application.add_handler(MessageHandler(cards_filter, my_cards_command))
    application.add_handler(MessageHandler(help_filter, show_help))
    application.add_handler(CallbackQueryHandler(handle_pagination, pattern=r"^paginate_"))
    application.add_handler(CallbackQueryHandler(noop_callback, pattern=r"^noop$"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
