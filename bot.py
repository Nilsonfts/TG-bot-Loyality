# -*- coding: utf-8 -*-

import logging
import os
import re
import json
from datetime import datetime
import asyncio
import io
import csv
from collections import Counter

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import gspread
from google.oauth2.service_account import Credentials

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
BOSS_ID = os.getenv("BOSS_ID") # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CARDS_PER_PAGE = 7

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
(
    REGISTER_CONTACT, REGISTER_FIO, REGISTER_EMAIL, REGISTER_JOB_TITLE,
    OWNER_LAST_NAME, OWNER_FIRST_NAME,
    REASON, CARD_TYPE, CARD_NUMBER, CATEGORY, AMOUNT,
    FREQUENCY, COMMENT, CONFIRMATION,
    SEARCH_CHOOSE_FIELD, AWAIT_SEARCH_QUERY
) = range(16)


# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° GOOGLE SHEETS ---
def get_gspread_client():
    try:
        creds_json_str = os.getenv("GOOGLE_CREDS_JSON")
        if creds_json_str:
            creds_info = json.loads(creds_json_str)
            scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
            creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
            return gspread.authorize(creds)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Google Sheets: {e}")
    return None

def get_cards_from_sheet(user_id: str = None) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã. –ï—Å–ª–∏ user_id —É–∫–∞–∑–∞–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –Ω–µ–º—É."""
    client = get_gspread_client()
    if not client: return []
    try:
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_KEY")).sheet1
        all_records = sheet.get_all_records() 
        
        if user_id:
            user_cards = [record for record in all_records if str(record.get('–¢–ì –ó–∞–ø–æ–ª–Ω—è—é—â–µ–≥–æ')) == user_id]
        else:
            user_cards = all_records

        return list(reversed(user_cards))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    return []

def write_to_sheet(data: dict, submission_time: str, tg_user_id: str):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏."""
    client = get_gspread_client()
    if not client: return False
    try:
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_KEY")).sheet1
        header = sheet.row_values(1)
        row_map = {
            '–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏': submission_time,
            '–¢–ì –ó–∞–ø–æ–ª–Ω—è—é—â–µ–≥–æ': tg_user_id,
            '–¢–µ–≥ Telegram': data.get('initiator_username', '‚Äì'),
            '–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã': data.get('initiator_email', ''),
            '–§–ò–û –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞': data.get('initiator_fio', ''),
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å': data.get('initiator_job_title', ''),
            '–¢–µ–ª–µ—Ñ–æ–Ω –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞': data.get('initiator_phone', ''),
            '–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞': data.get('owner_last_name', ''),
            '–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã': data.get('owner_first_name', ''),
            '–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –±–∞—Ä—Ç–µ—Ä–∞/—Å–∫–∏–¥–∫–∏': data.get('reason', ''),
            '–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?': data.get('card_type', ''),
            '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã': data.get('card_number', ''),
            '–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç': data.get('category', ''),
            '–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞ –∏–ª–∏ % —Å–∫–∏–¥–∫–∏': data.get('amount', ''),
            '–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ä—Ç–µ—Ä–∞': data.get('frequency', ''),
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–∞–∫–æ–º—É –±–∞—Ä—É)': data.get('comment', '')
        }
        final_row = [row_map.get(h, '') for h in header]
        sheet.append_row(final_row, value_input_option='USER_ENTERED')
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
    return False

# --- –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–ß–ò–°–¢–ö–ò –ß–ê–¢–ê ---
def add_message_to_delete(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    context.user_data.setdefault('messages_to_delete', []).append(message_id)

async def delete_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    message_ids = context.user_data.pop('messages_to_delete', [])
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
    for msg_id in message_ids:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –°–ò–°–¢–ï–ú–ê –ù–ê–í–ò–ì–ê–¶–ò–ò ---
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [["‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"], ["üîç –ü–æ–∏—Å–∫", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    cards_button_text = "üóÇÔ∏è –í—Å–µ –∑–∞—è–≤–∫–∏" if user_id == BOSS_ID else "üóÇÔ∏è –ú–æ–∏ –ö–∞—Ä—Ç—ã"
    
    keyboard = [
        [InlineKeyboardButton(cards_button_text, callback_data="settings_my_cards")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_show")],
        [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_show")]
    ]
    await update.message.reply_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=InlineKeyboardMarkup(keyboard))

async def settings_my_cards_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –ö–∞—Ä—Ç—ã' –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    await query.answer()
    await query.message.delete() # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –æ–±—ä–µ–∫—Ç message, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ my_cards_command
    await my_cards_command(query, context)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫)
async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    help_text = ("<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
                 "‚ñ´Ô∏è <b>–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</b> - –∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã.\n"
                 "‚ñ´Ô∏è <b>–í—Å–µ –∫–∞—Ä—Ç—ã / –ú–æ–∏ –ö–∞—Ä—Ç—ã</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫.\n"
                 "‚ñ´Ô∏è <b>–ü–æ–∏—Å–∫</b> - –ø–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∫–∞–º.\n"
                 "‚ñ´Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —ç—Ç–æ –º–µ–Ω—é.\n\n"
                 "–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–∏—Ç –µ–µ.")
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]]
    await query.edit_message_text(help_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
async def back_to_settings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    cards_button_text = "üóÇÔ∏è –í—Å–µ –∑–∞—è–≤–∫–∏" if user_id == BOSS_ID else "üóÇÔ∏è –ú–æ–∏ –ö–∞—Ä—Ç—ã"
    keyboard = [
        [InlineKeyboardButton(cards_button_text, callback_data="settings_my_cards")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_show")],
        [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="export_csv")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_show")]
    ]
    await query.edit_message_text("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=InlineKeyboardMarkup(keyboard))

async def stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = str(query.from_user.id)
    is_boss = (user_id == BOSS_ID)
    await query.edit_message_text("üìä –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    all_cards = get_cards_from_sheet() if is_boss else get_cards_from_sheet(user_id)
    if not all_cards: await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."); return
    total_cards = len(all_cards)
    barter_count = sum(1 for card in all_cards if card.get('–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?') == '–ë–∞—Ä—Ç–µ—Ä')
    discount_count = total_cards - barter_count
    try:
        category_counter = Counter(card.get('–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç') for card in all_cards if card.get('–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç'))
        most_common_category = category_counter.most_common(1)[0][0] if category_counter else "‚Äì"
    except Exception: most_common_category = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å"
    text = f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    if is_boss: text += f"üóÇÔ∏è –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: <b>{total_cards}</b>\n"
    else: text += f"üóÇÔ∏è –ü–æ–¥–∞–Ω–æ –≤–∞–º–∏ –∑–∞—è–≤–æ–∫: <b>{total_cards}</b>\n"
    text += f"    - –ö–∞—Ä—Ç '–ë–∞—Ä—Ç–µ—Ä': <code>{barter_count}</code>\n"
    text += f"    - –ö–∞—Ä—Ç '–°–∫–∏–¥–∫–∞': <code>{discount_count}</code>\n\n"
    text += f"üìà –°–∞–º–∞—è —á–∞—Å—Ç–∞—è —Å—Ç–∞—Ç—å—è: <b>{most_common_category}</b>"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

async def export_csv_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = str(query.from_user.id)
    is_boss = (user_id == BOSS_ID)
    await query.edit_message_text("üìÑ –§–æ—Ä–º–∏—Ä—É—é CSV —Ñ–∞–π–ª...")
    cards_to_export = get_cards_from_sheet() if is_boss else get_cards_from_sheet(user_id)
    if not cards_to_export: await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."); return
    output = io.StringIO()
    writer = csv.DictWriter(output, fieldnames=cards_to_export[0].keys())
    writer.writeheader()
    writer.writerows(cards_to_export)
    output.seek(0)
    file_to_send = InputFile(output.getvalue().encode('utf-8-sig'), filename=f"export_{datetime.now().strftime('%Y-%m-%d')}.csv")
    await context.bot.send_document(chat_id=query.message.chat_id, document=file_to_send)
    await query.message.delete()


# --- –ü–ê–ì–ò–ù–ê–¶–ò–Ø –ò –ü–û–ò–°–ö ---
# (–≠—Ç–æ—Ç –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def display_paginated_list(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int, data_key: str, list_title: str):
    message_to_edit = update.callback_query.message if update.callback_query else update.message
    all_items = context.user_data.get(data_key, [])
    if not all_items: await message_to_edit.edit_text("ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."); return
    start_index = page * CARDS_PER_PAGE
    end_index = start_index + CARDS_PER_PAGE
    items_on_page = all_items[start_index:end_index]
    total_pages = (len(all_items) + CARDS_PER_PAGE - 1) // CARDS_PER_PAGE
    text = f"<b>{list_title} (–°—Ç—Ä. {page + 1}/{total_pages}):</b>\n\n"
    for card in items_on_page:
        owner_name = f"{card.get('–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã','')} {card.get('–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞','-')}".strip()
        amount = card.get('–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞ –∏–ª–∏ % —Å–∫–∏–¥–∫–∏', '')
        amount_text = ""
        if amount:
            if card.get('–ö–∞–∫—É—é –∫–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º?') == '–°–∫–∏–¥–∫–∞': amount_text = f"üí∞ –°–∫–∏–¥–∫–∞: {amount}%\n"
            else: amount_text = f"üí∞ –ë–∞—Ä—Ç–µ—Ä: {amount} ‚ÇΩ\n"
        text += (f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_name}\nüìû –ù–æ–º–µ—Ä: {card.get('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', '-')}\n{amount_text}"
                 f"<b>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ:</b> <code>{card.get('–°—Ç–∞—Ç—É—Å –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è', '‚Äì')}</code> | <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> <code>{card.get('–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '‚Äì')}</code>\n"
                 f"üìÖ –î–∞—Ç–∞: {card.get('–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏', '-')}\n")
        if str(update.effective_user.id) == BOSS_ID:
            text += f"ü§µ‚Äç‚ôÇÔ∏è <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {card.get('–§–ò–û –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞', '-')} ({card.get('–¢–µ–≥ Telegram', '-')})\n"
        text += "--------------------\n"
    keyboard = []
    row = []
    if page > 0: row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"paginate_{data_key}_{page - 1}"))
    row.append(InlineKeyboardButton(f" —Å—Ç—Ä. {page + 1}/{total_pages} ", callback_data="noop"))
    if end_index < len(all_items): row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"paginate_{data_key}_{page + 1}"))
    keyboard.append(row)
    await message_to_edit.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    _, data_key, page_str = query.data.split('_')
    page = int(page_str)
    list_title = "–í—Å–µ –∑–∞—è–≤–∫–∏" if data_key == "mycards" and str(update.effective_user.id) == BOSS_ID else "–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
    await display_paginated_list(update, context, page=page, data_key=data_key, list_title=list_title)
async def noop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [[InlineKeyboardButton("–ü–æ –§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞", callback_data="search_by_name")],[InlineKeyboardButton("–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã", callback_data="search_by_phone")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return SEARCH_CHOOSE_FIELD
async def search_field_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['search_field'] = query.data
    await query.edit_message_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    return AWAIT_SEARCH_QUERY
async def perform_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    is_boss = (user_id == BOSS_ID)
    search_query = update.message.text.lower()
    search_field = context.user_data.get('search_field')
    loading_message = await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")
    all_cards = get_cards_from_sheet() if is_boss else get_cards_from_sheet(user_id)
    if not all_cards: await loading_message.edit_text("ü§∑ –ó–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ—Ç."); return ConversationHandler.END
    if search_field == 'search_by_name':
        search_results = [card for card in all_cards if search_query in card.get('–ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã', '').lower() or search_query in card.get('–§–∞–º–∏–ª–∏—è –í–ª–∞–¥–µ–ª—å—Ü–∞', '').lower()]
    elif search_field == 'search_by_phone':
        search_results = [card for card in all_cards if search_query in card.get('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', '')]
    else: search_results = []
    context.user_data['search'] = search_results
    await display_paginated_list(update, context, page=0, data_key='search', list_title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    return ConversationHandler.END


# --- –î–ò–ê–õ–û–ì –ü–û–î–ê–ß–ò –ó–ê–Ø–í–ö–ò –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô ---
# ... (–≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω —Å—Ç–∞–±–∏–ª–µ–Ω)
async def start_form_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await show_main_menu(update, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∫–æ–Ω—Ü–µ
    return ConversationHandler.END

# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∑–¥–µ—Å—å)
# ...

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---
def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    form_filter = filters.Regex("^(‚úçÔ∏è )?–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$")
    search_filter = filters.Regex("^(üîç )?–ü–æ–∏—Å–∫$")
    settings_filter = filters.Regex("^(‚öôÔ∏è )?–ù–∞—Å—Ç—Ä–æ–π–∫–∏$")
    main_menu_filter = filters.Regex("^(üè† )?–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$")

    state_text_filter = filters.TEXT & ~filters.COMMAND & ~form_filter & ~search_filter & ~settings_filter & ~main_menu_filter
    
    cancel_handler = CommandHandler("cancel", cancel)
    fallback_handler = MessageHandler(search_filter | settings_filter | main_menu_filter, cancel)
    
    # –î–∏–∞–ª–æ–≥–∏
    form_conv = ConversationHandler(
        entry_points=[MessageHandler(form_filter, start_form_conversation)],
        states={
            # ... (–≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        },
        fallbacks=[fallback_handler, cancel_handler],
    )
    search_conv = ConversationHandler(
        entry_points=[MessageHandler(search_filter, search_command)],
        states={
            SEARCH_CHOOSE_FIELD: [CallbackQueryHandler(search_field_chosen)],
            AWAIT_SEARCH_QUERY: [MessageHandler(state_text_filter, perform_search)]
        },
        fallbacks=[MessageHandler(form_filter | settings_filter | main_menu_filter, cancel), cancel_handler],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    application.add_handler(CommandHandler("start", show_main_menu))
    application.add_handler(MessageHandler(main_menu_filter, show_main_menu))
    application.add_handler(form_conv)
    application.add_handler(search_conv)
    application.add_handler(MessageHandler(settings_filter, show_settings))
    
    # ... (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö CallbackQueryHandler'–æ–≤)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
