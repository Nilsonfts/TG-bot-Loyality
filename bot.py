# -*- coding: utf-8 -*-

import logging
import os
import re
import json
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import gspread
from google.oauth2.service_account import Credentials

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CARDS_PER_PAGE = 5 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
(
    # –û—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞
    REUSE_DATA, EMAIL, FIO_INITIATOR, JOB_TITLE, OWNER_LAST_NAME, OWNER_FIRST_NAME,
    REASON, CARD_TYPE, CARD_NUMBER, CATEGORY, AMOUNT,
    FREQUENCY, COMMENT, CONFIRMATION,
    # –ü–æ–∏—Å–∫
    AWAIT_SEARCH_QUERY
) = range(15)


# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° GOOGLE SHEETS ---
def get_gspread_client():
    try:
        creds_json_str = os.getenv("GOOGLE_CREDS_JSON")
        if creds_json_str:
            creds_info = json.loads(creds_json_str)
            scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
            creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
            return gspread.authorize(creds)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Google Sheets: {e}")
    return None

def get_all_user_cards_from_sheet(user_id: str) -> list:
    client = get_gspread_client()
    if not client: return []
    try:
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_KEY")).sheet1
        cell_list = sheet.findall(user_id, in_column=2)
        cards = []
        for cell in cell_list:
            row = sheet.row_values(cell.row)
            if len(row) >= 19:
                card_info = {
                    "date": row[0], "owner_first_name": row[6], "owner_last_name": row[5],
                    "card_number": row[9], "status_q": row[16] or "‚Äì", "status_s": row[18] or "‚Äì"
                }
                cards.append(card_info)
        return list(reversed(cards))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    return []

def write_to_sheet(data: dict, submission_time: str, tg_user_id: str):
    client = get_gspread_client()
    if not client: return False
    try:
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_KEY")).sheet1
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–æ–≤–Ω–æ –∏–∑ 19 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü–∞–º A-S
        # 14 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ + 5 –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ N, O, P, R, T
        row_to_insert = [
            submission_time, tg_user_id, data.get('email', ''), data.get('fio_initiator', ''),
            data.get('job_title', ''), data.get('owner_last_name', ''), data.get('owner_first_name', ''),
            data.get('reason', ''), data.get('card_type', ''), data.get('card_number', ''),
            data.get('category', ''), data.get('amount', ''), data.get('frequency', ''),
            data.get('comment', ''), '', '', '', '', '' # –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ N, O, P, R. –°—Ç–∞—Ç—É—Å—ã Q –∏ S –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é.
        ]
        sheet.append_row(row_to_insert, value_input_option='USER_ENTERED')
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
    return False

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ò –°–ò–°–¢–ï–ú–ê –ù–ê–í–ò–ì–ê–¶–ò–ò ---
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
    keyboard = [
        ["‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üóÇÔ∏è –ú–æ–∏ –ö–∞—Ä—Ç—ã"],
        ["üîç –ü–æ–∏—Å–∫", "‚ùì –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    help_text = (
        "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "‚ñ´Ô∏è <b>–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</b> - –∑–∞–ø—É—Å–∫ –ø–æ—à–∞–≥–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "‚ñ´Ô∏è <b>–ú–æ–∏ –ö–∞—Ä—Ç—ã</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏.\n\n"
        "‚ñ´Ô∏è <b>–ü–æ–∏—Å–∫</b> - –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–∏–º –∑–∞—è–≤–∫–∞–º (–ø–æ –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞).\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ (–≤–∞—Å) –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –±—É–¥—É—â–µ–º. "
        "–ü–æ –≤—Å–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# --- –û–ë–©–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ê–ì–ò–ù–ê–¶–ò–ò ---
async def display_paginated_list(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int, data_key: str, list_title: str, message_to_edit):
    all_items = context.user_data.get(data_key, [])
    if not all_items:
        await message_to_edit.edit_text("ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    start_index = page * CARDS_PER_PAGE
    end_index = start_index + CARDS_PER_PAGE
    items_on_page = all_items[start_index:end_index]
    total_pages = (len(all_items) + CARDS_PER_PAGE - 1) // CARDS_PER_PAGE

    text = f"<b>{list_title} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):</b>\n\n"
    for card in items_on_page:
        owner_name = f"{card.get('owner_first_name','')} {card.get('owner_last_name','-')}".strip()
        text += (
            f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner_name}\n"
            f"üìû –ù–æ–º–µ—Ä: {card['card_number']}\n"
            f"<b>–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ:</b> <code>{card['status_q']}</code>\n"
            f"<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> <code>{card['status_s']}</code>\n"
            f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {card['date']}\n"
            f"--------------------\n"
        )

    keyboard = []
    row = []
    if page > 0:
        row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"paginate_{data_key}_{page - 1}"))
    row.append(InlineKeyboardButton(f" —Å—Ç—Ä. {page + 1}/{total_pages} ", callback_data="noop"))
    if end_index < len(all_items):
        row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"paginate_{data_key}_{page + 1}"))
    keyboard.append(row)

    await message_to_edit.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    _, data_key, page_str = query.data.split('_')
    page = int(page_str)
    
    list_title = "–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏" if data_key == "mycards" else "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"
    await display_paginated_list(update, context, page=page, data_key=data_key, list_title=list_title, message_to_edit=query.message)

async def noop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.answer()

# --- –§–£–ù–ö–¶–ò–ò –ö–û–ú–ê–ù–î –ú–ï–ù–Æ ---
async def my_cards_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    loading_message = await update.message.reply_text("üîç –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")
    all_cards = get_all_user_cards_from_sheet(user_id)
    if not all_cards:
        await loading_message.edit_text("ü§∑ –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏.")
        return
    context.user_data['mycards'] = all_cards
    await display_paginated_list(update, context, page=0, data_key='mycards', list_title="–í–∞—à–∏ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", message_to_edit=loading_message)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ (–∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):")
    return AWAIT_SEARCH_QUERY

async def perform_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    search_query = update.message.text.lower()
    loading_message = await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...")

    all_cards = get_all_user_cards_from_sheet(user_id)
    if not all_cards:
        await loading_message.edit_text("ü§∑ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return ConversationHandler.END

    search_results = [
        card for card in all_cards
        if search_query in card['owner_first_name'].lower()
        or search_query in card['owner_last_name'].lower()
        or search_query in card['card_number']
    ]

    context.user_data['search'] = search_results
    await display_paginated_list(update, context, page=0, data_key='search', list_title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", message_to_edit=loading_message)
    return ConversationHandler.END


# --- –î–ò–ê–õ–û–ì –ü–û–î–ê–ß–ò –ó–ê–Ø–í–ö–ò ---
async def start_form_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.effective_user.id)
    chat = update.effective_chat
    
    if context.user_data.get('initiator_fio'):
        initiator_data = {
            "fio": context.user_data.get('initiator_fio'), "email": context.user_data.get('initiator_email'),
            "job_title": context.user_data.get('initiator_job_title')
        }
    else:
        initiator_data = None
    
    form_keys = ['owner_last_name', 'owner_first_name', 'reason', 'card_type', 'card_number', 'category', 'amount', 'frequency', 'comment', 'email', 'fio_initiator', 'job_title']
    for key in form_keys:
        if key in context.user_data: del context.user_data[key]

    if initiator_data:
        text = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞:\n\n"
                f"üë§ <b>–§–ò–û:</b> {initiator_data['fio']}\nüìß <b>–ü–æ—á—Ç–∞:</b> {initiator_data['email']}\n"
                f"üè¢ <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {initiator_data['job_title']}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?")
        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞", callback_data="reuse_data"), InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="enter_new_data")]]
        await chat.send_message(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
        return REUSE_DATA
    else:
        await chat.send_message("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É.")
        return EMAIL

# ... (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_... –∏ format_summary –æ—Å—Ç–∞—é—Ç—Å—è –∑–¥–µ—Å—å)
async def handle_reuse_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == 'reuse_data':
        context.user_data['email'] = context.user_data['initiator_email']
        context.user_data['fio_initiator'] = context.user_data['initiator_fio']
        context.user_data['job_title'] = context.user_data['initiator_job_title']
        await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.HTML)
        return OWNER_LAST_NAME
    else:
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ.")
        await query.message.reply_text("–í–∞—à–∞ —Ä–∞–±–æ—á–∞—è –ø–æ—á—Ç–∞?")
        return EMAIL

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['email'] = update.message.text
    context.user_data['initiator_email'] = update.message.text
    await update.message.reply_text("–í–∞—à–µ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é)?")
    return FIO_INITIATOR

async def get_fio_initiator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['fio_initiator'] = update.message.text
    context.user_data['initiator_fio'] = update.message.text
    await update.message.reply_text("–í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å?")
    return JOB_TITLE

async def get_job_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['job_title'] = update.message.text
    context.user_data['initiator_job_title'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.HTML)
    return OWNER_LAST_NAME

async def get_owner_last_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['owner_last_name'] = update.message.text
    await update.message.reply_text("<b>–ò–º—è</b> –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã.", parse_mode=ParseMode.HTML)
    return OWNER_FIRST_NAME

async def get_owner_first_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['owner_first_name'] = update.message.text
    await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏?")
    return REASON

async def get_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['reason'] = update.message.text
    keyboard = [[InlineKeyboardButton("–ë–∞—Ä—Ç–µ—Ä", callback_data="–ë–∞—Ä—Ç–µ—Ä"), InlineKeyboardButton("–°–∫–∏–¥–∫–∞", callback_data="–°–∫–∏–¥–∫–∞")]]
    await update.message.reply_text("–¢–∏–ø –∫–∞—Ä—Ç—ã?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CARD_TYPE

async def get_card_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['card_type'] = query.data
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ 8)?")
    return CARD_NUMBER

async def get_card_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    number = update.message.text
    if not (number.startswith('8') and number[1:].isdigit() and len(number) == 11):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 8.")
        return CARD_NUMBER
    context.user_data['card_number'] = number
    keyboard = [[InlineKeyboardButton("–ê–†–¢", callback_data="–ê–†–¢"), InlineKeyboardButton("–ú–ê–†–ö–ï–¢", callback_data="–ú–ê–†–ö–ï–¢")], [InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫", callback_data="–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫")], [InlineKeyboardButton("–°–ö–ò–î–ö–ê", callback_data="–°–ö–ò–î–ö–ê"), InlineKeyboardButton("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")], [InlineKeyboardButton("–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏", callback_data="–£—á—Ä–µ–¥–∏—Ç–µ–ª–∏")]]
    await update.message.reply_text("–°—Ç–∞—Ç—å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CATEGORY

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['category'] = query.data
    prompt = "–°—É–º–º–∞ –±–∞—Ä—Ç–µ—Ä–∞?" if context.user_data.get('card_type') == "–ë–∞—Ä—Ç–µ—Ä" else "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏?"
    await query.edit_message_text(f"–°—Ç–∞—Ç—å—è: {query.data}.\n\n{prompt}")
    return AMOUNT

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if not text.isdigit():
        await update.message.reply_text("–ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return AMOUNT
    context.user_data['amount'] = text
    keyboard = [[InlineKeyboardButton("–†–∞–∑–æ–≤–∞—è", callback_data="–†–∞–∑–æ–≤–∞—è")], [InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É", callback_data="–î–æ–ø–æ–ª–Ω–∏—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É")], [InlineKeyboardButton("–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã", callback_data="–ó–∞–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã")]]
    await update.message.reply_text("–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return FREQUENCY

async def get_frequency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['frequency'] = query.data
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {query.data}.\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?")
    return COMMENT

def format_summary(data: dict) -> str:
    owner_full_name = f"{data.get('owner_first_name', '')} {data.get('owner_last_name', '')}".strip()
    card_type = data.get('card_type')
    amount_label = "–°–∫–∏–¥–∫–∞" if card_type == '–°–∫–∏–¥–∫–∞' else "–°—É–º–º–∞"
    amount_value = f"{data.get('amount', '0')}{'%' if card_type == '–°–∫–∏–¥–∫–∞' else ' ‚ÇΩ'}"
    return (
        "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:</b>\n"
        "<b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> {fio}, {job}, {email}\n"
        "<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {owner}\n"
        "<b>–ö–∞—Ä—Ç–∞:</b> {num}, {type}\n"
        "<b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ:</b> {amount} ({label})\n"
        "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comm}".format(
            fio=data.get('fio_initiator', '-'), job=data.get('job_title', '-'), email=data.get('email', '-'),
            owner=owner_full_name, num=data.get('card_number', '-'), type=card_type,
            amount=amount_value, label=data.get('frequency', '-'), comm=data.get('comment', '-')
        )
    )

async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['comment'] = update.message.text
    summary = format_summary(context.user_data)
    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data="submit"), InlineKeyboardButton("‚ùå –ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return CONFIRMATION

async def submit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–°–æ—Ö—Ä–∞–Ω—è—é...")
    user_id = str(query.from_user.id)
    success = write_to_sheet(context.user_data, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), user_id)
    if success:
        await query.edit_message_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞—è–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.")
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await show_main_menu(query.message, context)
    context.user_data.clear()
    return ConversationHandler.END

async def restart_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ...")
    return await start_form_conversation(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_main_menu(update.message, context)
    return ConversationHandler.END


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---
def main() -> None:
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN.")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    form_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É$"), start_form_conversation)],
        states={
            REUSE_DATA: [CallbackQueryHandler(handle_reuse_choice)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
            FIO_INITIATOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio_initiator)],
            JOB_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_job_title)],
            OWNER_LAST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_owner_last_name)],
            OWNER_FIRST_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_owner_first_name)],
            REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_reason)],
            CARD_TYPE: [CallbackQueryHandler(get_card_type)],
            CARD_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_card_number)],
            CATEGORY: [CallbackQueryHandler(get_category)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)],
            FREQUENCY: [CallbackQueryHandler(get_frequency)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_comment)],
            CONFIRMATION: [
                CallbackQueryHandler(submit, pattern="^submit$"),
                CallbackQueryHandler(restart_conversation, pattern="^restart$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üîç –ü–æ–∏—Å–∫$"), search_command)],
        states={ AWAIT_SEARCH_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, perform_search)] },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", show_main_menu))
    application.add_handler(form_conv)
    application.add_handler(search_conv)
    application.add_handler(MessageHandler(filters.Regex("^üóÇÔ∏è –ú–æ–∏ –ö–∞—Ä—Ç—ã$"), my_cards_command))
    application.add_handler(MessageHandler(filters.Regex("^‚ùì –ü–æ–º–æ—â—å$"), show_help))
    application.add_handler(CallbackQueryHandler(handle_pagination, pattern=r"^paginate_"))
    application.add_handler(CallbackQueryHandler(noop_callback, pattern=r"^noop$"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
