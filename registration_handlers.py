# -*- coding: utf-8 -*-

import logging
import re
from datetime import datetime

from telegram import Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes, ConversationHandler

import g_sheets
import navigation_handlers
from constants import (
    REGISTER_CONTACT, REGISTER_FIO, REGISTER_EMAIL, REGISTER_JOB_TITLE
)

logger = logging.getLogger(__name__)

async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    context.user_data.clear()
    keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return REGISTER_CONTACT

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact, user = update.message.contact, update.effective_user
    context.user_data['initiator_phone'] = contact.phone_number.replace('+', '')
    context.user_data['initiator_username'] = f"@{user.username}" if user.username else "‚Äì"
    await update.message.reply_text("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ø–æ–ª–Ω–æ–µ –§–ò–û</b>.", reply_markup=ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)
    return REGISTER_FIO

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['initiator_fio'] = update.message.text
    await update.message.reply_text("‚úÖ –§–ò–û –ø—Ä–∏–Ω—è—Ç–æ.\n\nüìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>—Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É</b>.", parse_mode=ParseMode.HTML)
    return REGISTER_EMAIL

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = update.message.text
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return REGISTER_EMAIL
    context.user_data['initiator_email'] = email
    await update.message.reply_text("‚úÖ –ü–æ—á—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\nüè¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–¥–æ–ª–∂–Ω–æ—Å—Ç—å</b>.", parse_mode=ParseMode.HTML)
    return REGISTER_JOB_TITLE

async def get_job_title_and_finish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "–≥–æ–Ω–∫–∏"."""
    context.user_data['initiator_job_title'] = update.message.text
    
    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è—é...")

    user_id = str(update.effective_user.id)
    
    # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    data_to_write = {
        'submission_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'tg_user_id': user_id,
        'initiator_username': context.user_data.get('initiator_username', '‚Äì'),
        'initiator_email': context.user_data.get('initiator_email'),
        'initiator_fio': context.user_data.get('initiator_fio'),
        'initiator_job_title': context.user_data.get('initiator_job_title'),
        'initiator_phone': context.user_data.get('initiator_phone'),
        'status': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    }

    success = g_sheets.write_row(data_to_write)

    if success:
        await update.message.reply_text("üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.", parse_mode=ParseMode.HTML)
        
        # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò –ó–î–ï–°–¨ ===
        initiator_data_to_cache = {
            'initiator_username': context.user_data.get('initiator_username'),
            'initiator_email': context.user_data.get('initiator_email'),
            'initiator_fio': context.user_data.get('initiator_fio'),
            'initiator_job_title': context.user_data.get('initiator_job_title'),
            'initiator_phone': context.user_data.get('initiator_phone'),
        }
        g_sheets.INITIATOR_DATA_CACHE[user_id] = {
            'data': initiator_data_to_cache,
            'timestamp': datetime.now() # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
        }
        g_sheets.REGISTRATION_STATUS_CACHE[user_id] = {'timestamp': datetime.now()} # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
        logger.info(f"User {user_id} data and registration status were cached immediately after registration.")

    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    context.user_data.clear()
    await navigation_handlers.main_menu_command(update, context)
    return ConversationHandler.END
