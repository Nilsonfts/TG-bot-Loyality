#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import utils
from constants import SheetCols

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_data_export_completeness():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–¢–´ –í–´–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    test_user_id = "987654321"
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        utils.init_local_db()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        test_user_data = {
            'tg_user_id': test_user_id,
            'initiator_fio': '–¢–µ—Å—Ç–æ–≤—ã–π –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –¢–µ—Å—Ç–æ–≤–∏—á',
            'initiator_email': 'test.initiator@example.com',
            'initiator_job_title': '–ì–ª–∞–≤–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫',
            'initiator_phone': '+7 (999) 888-77-66',
            'initiator_username': '@test_initiator'
        }
        
        utils.save_user_to_local_db(test_user_data)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {test_user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
        initiator_data = utils.get_initiator_from_local_db(test_user_id)
        print(f"\nüìã –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î:")
        for key, value in initiator_data.items():
            print(f"   {key}: '{value}'")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
        form_data = {
            'owner_last_name': '–í–ª–∞–¥–µ–ª—å—Ü–µ–≤',
            'owner_first_name': '–í–ª–∞–¥–∏–º–∏—Ä',
            'reason': '–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã',
            'card_type': '–ë–∞—Ä—Ç–µ—Ä',
            'card_number': '9876543210',
            'category': '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'amount': '5000',
            'frequency': '–ï–∂–µ–º–µ—Å—è—á–Ω–æ',
            'issue_location': '–¢–µ—Å—Ç–æ–≤—ã–π –±–∞—Ä "–£ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞"'
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        complete_data = {}
        complete_data.update(initiator_data)
        complete_data.update(form_data)
        complete_data.update({
            'submission_time': '2025-07-16 16:00:00',
            'tg_user_id': test_user_id,
            'status': '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
            'initiator_username': '@test_initiator'
        })
        
        print(f"\nüìä –ü–û–õ–ù–´–ô –ù–ê–ë–û–† –î–ê–ù–ù–´–• ({len(complete_data)} –ø–æ–ª–µ–π):")
        for i, (key, value) in enumerate(complete_data.items(), 1):
            print(f"   {i:2d}. {key}: '{value}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ Google Sheets
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ö–û–ù–°–¢–ê–ù–¢–ê–ú:")
        
        field_mapping = {
            'submission_time': SheetCols.TIMESTAMP,
            'tg_user_id': SheetCols.TG_ID,
            'initiator_username': SheetCols.TG_TAG,
            'initiator_email': SheetCols.EMAIL,
            'initiator_fio': SheetCols.FIO_INITIATOR,
            'initiator_job_title': SheetCols.JOB_TITLE,
            'initiator_phone': SheetCols.PHONE_INITIATOR,
            'owner_first_name': SheetCols.OWNER_FIRST_NAME_COL,
            'owner_last_name': SheetCols.OWNER_LAST_NAME_COL,
            'reason': SheetCols.REASON_COL,
            'card_type': SheetCols.CARD_TYPE_COL,
            'card_number': SheetCols.CARD_NUMBER_COL,
            'category': SheetCols.CATEGORY_COL,
            'amount': SheetCols.AMOUNT_COL,
            'frequency': SheetCols.FREQUENCY_COL,
            'issue_location': SheetCols.ISSUE_LOCATION_COL,
            'status': SheetCols.STATUS_COL,
        }
        
        mapped_data = {}
        for data_field, sheet_column in field_mapping.items():
            value = complete_data.get(data_field, '')
            mapped_data[sheet_column] = value
            status = "‚úÖ" if value else "‚ùå"
            print(f"   {status} {data_field} ‚Üí {sheet_column}: '{value}'")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—É—Å—Ç—ã–º–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        mapped_data[SheetCols.APPROVAL_STATUS] = ''
        mapped_data[SheetCols.START_DATE] = ''
        mapped_data[SheetCols.ACTIVATED] = ''
        mapped_data[SheetCols.REASON_REJECT] = ''
        
        print(f"\nüìã –ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø GOOGLE SHEETS ({len(mapped_data)} –ø–æ–ª–µ–π):")
        for i, (column, value) in enumerate(mapped_data.items(), 1):
            status = "‚úÖ" if value else "‚≠ï"
            print(f"   {i:2d}. {status} {column}: '{value}'")
        
        filled_fields = sum(1 for v in mapped_data.values() if v)
        total_fields = len(mapped_data)
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ–π: {filled_fields}/{total_fields}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {filled_fields/total_fields*100:.1f}%")
        
        if filled_fields >= total_fields - 4:  # 4 –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ–∑–∂–µ (approval –∏ —Ç.–¥.)
            print(f"\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return True
        else:
            print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    test_data_export_completeness()
